import { serve } from 'https://deno.land/std@0.177.1/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3';
import Stripe from 'https://esm.sh/stripe@14.0.0?target=deno';
const stripe = new Stripe(Deno.env.get('STRIPE_SECRET_KEY') || '', {
  apiVersion: '2023-10-16',
  httpClient: Stripe.createFetchHttpClient()
});
// CryptoProvider for webhook signature verification
const cryptoProvider = Stripe.createSubtleCryptoProvider();
const supabaseUrl = Deno.env.get('SUPABASE_URL');
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
const webhookSecret = Deno.env.get('STRIPE_WEBHOOK_SECRET');
serve(async (req)=>{
  // CORS対応
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type, stripe-signature',
    'Access-Control-Allow-Methods': 'POST, OPTIONS'
  };
  if (req.method === 'OPTIONS') {
    return new Response('ok', {
      status: 200,
      headers
    });
  }
  try {
    // Webhook署名の検証（非同期で実行）
    const signature = req.headers.get('stripe-signature');
    const body = await req.text();
    if (!signature) {
      console.error('No stripe-signature header found');
      return new Response('No signature', {
        status: 400,
        headers
      });
    }
    let event;
    try {
      // constructEventAsyncを使用して非同期で検証
      event = await stripe.webhooks.constructEventAsync(body, signature, webhookSecret, undefined, cryptoProvider);
    } catch (err) {
      console.error('Webhook signature verification failed:', err);
      return new Response('Webhook signature verification failed', {
        status: 400,
        headers
      });
    }
    // Supabaseクライアント作成（Service Roleキーを使用）
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    console.log(`Processing webhook event: ${event.type}`);
    // イベントタイプに応じて処理
    switch(event.type){
      case 'checkout.session.completed':
        {
          const session = event.data.object;
          const userId = session.metadata?.user_id;
          if (!userId) {
            console.error('User ID not found in session metadata');
            break;
          }
          console.log(`Checkout completed for user: ${userId}`);
          // サブスクリプション情報を取得
          const subscription = await stripe.subscriptions.retrieve(session.subscription);
          // Supabaseにサブスクリプション情報を保存
          const { error: insertError } = await supabase.from('subscriptions').upsert({
            user_id: userId,
            stripe_subscription_id: subscription.id,
            stripe_customer_id: subscription.customer,
            // stripe_price_id: subscription.items.data[0].price.id, // Column not exists, commented out
            status: 'active',
            current_period_start: new Date(subscription.current_period_start * 1000).toISOString(),
            current_period_end: new Date(subscription.current_period_end * 1000).toISOString(),
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          }, {
            onConflict: 'user_id'
          });
          if (insertError) {
            console.error('Error saving subscription:', insertError);
          } else {
            console.log('Subscription created/updated for user:', userId);
          }
          break;
        }
      case 'customer.subscription.updated':
        {
          const subscription = event.data.object;
          const userId = subscription.metadata?.user_id;
          if (!userId) {
            console.log('No user_id in subscription metadata, skipping');
            break;
          }
          console.log(`Subscription updated for user: ${userId}`);
          // サブスクリプション状態を更新
          const { error: updateError } = await supabase.from('subscriptions').update({
            status: subscription.status === 'active' ? 'active' : 'inactive',
            current_period_start: new Date(subscription.current_period_start * 1000).toISOString(),
            current_period_end: new Date(subscription.current_period_end * 1000).toISOString(),
            updated_at: new Date().toISOString()
          }).eq('stripe_subscription_id', subscription.id);
          if (updateError) {
            console.error('Error updating subscription:', updateError);
          } else {
            console.log('Subscription updated for:', subscription.id);
          }
          break;
        }
      case 'customer.subscription.deleted':
        {
          const subscription = event.data.object;
          console.log(`Subscription deleted: ${subscription.id}`);
          // サブスクリプションを無効化
          const { error: deleteError } = await supabase.from('subscriptions').update({
            status: 'cancelled',
            cancelled_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          }).eq('stripe_subscription_id', subscription.id);
          if (deleteError) {
            console.error('Error cancelling subscription:', deleteError);
          } else {
            console.log('Subscription cancelled:', subscription.id);
          }
          break;
        }
      case 'invoice.payment_succeeded':
        {
          const invoice = event.data.object;
          const subscriptionId = invoice.subscription;
          if (subscriptionId) {
            console.log(`Payment succeeded for subscription: ${subscriptionId}`);
            // サブスクリプションのステータスを確実にactiveにする
            const { error } = await supabase.from('subscriptions').update({
              status: 'active',
              updated_at: new Date().toISOString()
            }).eq('stripe_subscription_id', subscriptionId);
            if (error) {
              console.error('Error updating subscription status:', error);
            } else {
              console.log('Subscription status updated to active');
            }
          }
          break;
        }
      case 'invoice.payment_failed':
        {
          const invoice = event.data.object;
          const subscriptionId = invoice.subscription;
          if (subscriptionId) {
            console.log(`Payment failed for subscription: ${subscriptionId}`);
            const { error } = await supabase.from('subscriptions').update({
              status: 'past_due',
              updated_at: new Date().toISOString()
            }).eq('stripe_subscription_id', subscriptionId);
            if (error) {
              console.error('Error updating subscription status:', error);
            }
          }
          break;
        }
      default:
        console.log(`Unhandled event type: ${event.type}`);
    }
    return new Response(JSON.stringify({
      received: true
    }), {
      headers: {
        ...headers,
        'Content-Type': 'application/json'
      },
      status: 200
    });
  } catch (err) {
    console.error('Error processing webhook:', err);
    return new Response(JSON.stringify({
      error: 'Webhook processing failed'
    }), {
      status: 500,
      headers: {
        ...headers,
        'Content-Type': 'application/json'
      }
    });
  }
});
