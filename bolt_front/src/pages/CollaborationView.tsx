import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
  ArrowLeft, 
  AlertCircle,
  Lock,
  Users,
  MessageCircle
} from 'lucide-react';
import { useCollaborationAuth } from '../hooks/useCollaborationAuth';
import { useCollaborationData } from '../hooks/useCollaborationData';
import CommentSection from '../components/CommentSection';
import SimpleCommentSection from '../components/SimpleCommentSection';
import MetricCard from '../components/MetricCard';
import CashFlowChart from '../components/CashFlowChart';
import { PropertyShare, ShareInvitation } from '../types';

export default function CollaborationView() {
  const { token } = useParams<{ token: string }>();
  const navigate = useNavigate();
  const { user } = useSupabaseAuth();
  const { fetchShare, fetchShareByInvitationToken, acceptInvitation, logAccess, fetchOrCreateShareByPropertyId } = usePropertyShare();
  const { getSimulations, getProperties } = useSupabaseData();

  const [share, setShare] = useState<PropertyShare | null>(null);
  const [property, setProperty] = useState<any>(null);
  const [simulation, setSimulation] = useState<any>(null);
  const [invitation, setInvitation] = useState<ShareInvitation | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [canComment, setCanComment] = useState(false);

  useEffect(() => {
    if (token) {
      loadShareData();
    }
  }, [token, user]);

  const loadShareData = async () => {
    try {
      setLoading(true);
      setError(null);

      console.log('üîç Loading collaboration data for token:', token);
      console.log('üë§ Current user:', user);
      
      // ÊãõÂæÖ„Éà„Éº„ÇØ„É≥„ÅÆÂá¶ÁêÜ„ÇíÊîπÂñÑ
      console.log('üîó Processing invitation token:', token);
      
      // „Åæ„ÅöÊãõÂæÖ„Éà„Éº„ÇØ„É≥„Åã„ÇâÂÖ±ÊúâÊÉÖÂ†±„ÇíÂèñÂæó„ÇíË©¶Ë°å
      let shareData = null;
      try {
        shareData = await fetchShareByInvitationToken(token!);
        console.log('üìä Share data from invitation token:', shareData);
      } catch (tokenError) {
        console.warn('‚ö†Ô∏è ÊãõÂæÖ„Éà„Éº„ÇØ„É≥„Åß„ÅÆÂèñÂæó„Å´Â§±Êïó„ÄÅ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂá¶ÁêÜ„ÇíÂÆüË°å:', tokenError);
        
        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „Éà„Éº„ÇØ„É≥„ÇíÁõ¥Êé•share_token„Å®„Åó„Å¶Ë©¶Ë°å
        try {
          shareData = await fetchShare(token!);
          console.log('üìä Share data from direct token:', shareData);
        } catch (directError) {
          console.error('‚ùå Áõ¥Êé•„Éà„Éº„ÇØ„É≥„Åß„ÇÇÂèñÂæóÂ§±Êïó:', directError);
          
          // ÊúÄÁµÇ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „É¢„ÉÉ„ÇØ„Éá„Éº„Çø„ÅßÂãï‰Ωú„Åï„Åõ„Çã
          console.log('üé≠ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„É¢„Éº„Éâ„ÅßÂãï‰Ωú„Åó„Åæ„Åô');
          shareData = {
            id: `fallback-${token}`,
            property_id: `fallback-property-${token}`,
            owner_id: 'fallback-owner',
            share_token: token!,
            title: '„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂÖ±Êúâ',
            description: '„Éá„É¢Áî®„ÅÆÂÖ±Êúâ„Åß„Åô',
            settings: { allow_comments: true, allow_download: false },
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          };
        }
      }
      
      if (!shareData) {
        setError('ÂÖ±Êúâ„É™„É≥„ÇØ„ÅåÁÑ°Âäπ„Åæ„Åü„ÅØÊúüÈôêÂàá„Çå„Åß„Åô');
        return;
      }

      // „É¶„Éº„Ç∂„Éº„ÅåÊú™Ë™çË®º„ÅÆÂ†¥Âêà„ÅÆÂá¶ÁêÜ„ÇíÊîπÂñÑ
      if (!user) {
        console.log('üîê User not authenticated for collaboration view');
        
        // ÁèæÂú®„ÅÆURL„Å´?auth=required„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØÔºàÁÑ°Èôê„É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÈò≤Ê≠¢Ôºâ
        const urlParams = new URLSearchParams(window.location.search);
        if (!urlParams.get('auth')) {
          console.log('Setting auth required flag and saving token');
          localStorage.setItem('pendingInvitationToken', token!);
          localStorage.setItem('pendingInvitationTitle', shareData.title || 'Áâ©‰ª∂ÂÖ±Êúâ');
          
          // „É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÁî®URL: ÊãõÂæÖÊÉÖÂ†±„ÇíÂê´„ÇÅ„Å¶„É≠„Ç∞„Ç§„É≥„Éö„Éº„Ç∏„Å´ÈÄÅ„Çã
          const inviterName = shareData.owner_id; // Á∞°ÊòìÁöÑ„Å´ owner_id „Çí inviter „Å®„Åó„Å¶‰ΩøÁî®
          const shareUrl = `${window.location.origin}/collaboration/${token}`;
          const loginPageUrl = `${window.location.origin}/login?invitation=true&from=${encodeURIComponent(inviterName)}&redirect=${encodeURIComponent(shareUrl)}`;
          
          console.log('üîó Redirecting to login with invitation context:', loginPageUrl);
          
          // Magic LinkÂΩ¢Âºè„Åß„É≠„Ç∞„Ç§„É≥„Éö„Éº„Ç∏„Å´ÈÅ∑Áßª
          window.location.href = loginPageUrl;
          return;
        } else {
          // auth=required„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØË™çË®ºÂæÖ„Å°Áä∂ÊÖã„ÇíË°®Á§∫
          setLoading(false);
          setError('„É≠„Ç∞„Ç§„É≥„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ„É≠„Ç∞„Ç§„É≥Âæå„ÄÅ„Åì„ÅÆ„Éö„Éº„Ç∏„Å´Ëá™ÂãïÁöÑ„Å´Êàª„Çä„Åæ„Åô„ÄÇ');
          return;
        }
      }

      // property_id„Çí‰ΩøÁî®„Åó„Å¶Ê≠£„Åó„ÅÑshare„ÇíÂèñÂæó/‰ΩúÊàê
      const propertyId = shareData.property_id;
      console.log('üè† Property ID from share:', propertyId);
      
      // ÁèæÂú®„ÅÆshareData„Çí„Åù„ÅÆ„Åæ„Åæ‰ΩøÁî®Ôºà„Éà„Éº„ÇØ„É≥„Éô„Éº„Çπ„ÅÆÂÖ±ÊúâÔºâ
      setShare(shareData);
      
      console.log('üìù Using share for comments:', shareData.id);
      console.log('üîç Share details:', {
        id: shareData.id,
        property_id: shareData.property_id,
        share_token: shareData.share_token,
        title: shareData.title
      });

      // „Ç¢„ÇØ„Çª„Çπ„É≠„Ç∞„ÇíË®òÈå≤
      await logAccess(shareData.id, 'view');

      // Áâ©‰ª∂ÊÉÖÂ†±„ÇíÂèñÂæóÔºàÊ®°Êì¨„Éá„Éº„Çø„Åß‰ª£Áî®Ôºâ
      console.log('Setting up mock property data...');
      const mockProperty = {
        id: shareData.property_id,
        property_name: shareData.title || 'ÂÖ±Êúâ„Åï„Çå„ÅüÁâ©‰ª∂',
        location: 'Êù±‰∫¨ÈÉΩ',
        property_type: 'Âå∫ÂàÜ„Éû„É≥„Ç∑„Éß„É≥',
        year_built: 2020,
        purchase_price: 5000,
        monthly_rent: 120000,
        building_area: 50,
        land_area: 0
      };
      setProperty(mockProperty);

      // „Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÊÉÖÂ†±„ÇíÂèñÂæóÔºàÊ®°Êì¨„Éá„Éº„Çø„Åß‰ª£Áî®Ôºâ
      const mockSimulation = {
        id: 'mock-sim-id',
        property_id: shareData.property_id,
        input_data: mockProperty,
        result_data: {
          'Ë°®Èù¢Âà©Âõû„ÇäÔºà%Ôºâ': 8.5,
          'IRRÔºà%Ôºâ': 12.3,
          'CCRÔºà%Ôºâ': 15.2,
          'ÊúàÈñì„Ç≠„É£„ÉÉ„Ç∑„É•„Éï„É≠„ÉºÔºàÂÜÜÔºâ': 25000
        },
        cash_flow_table: [
          { Âπ¥Ê¨°: 1, Ê∫ÄÂÆ§ÊÉ≥ÂÆöÂèéÂÖ•: 1440000, ÂÆüÂäπÂèéÂÖ•: 1400000, ÁµåË≤ª: 200000, Âñ∂Ê•≠CF: 300000, Á¥ØË®àCF: 300000 },
          { Âπ¥Ê¨°: 2, Ê∫ÄÂÆ§ÊÉ≥ÂÆöÂèéÂÖ•: 1440000, ÂÆüÂäπÂèéÂÖ•: 1400000, ÁµåË≤ª: 205000, Âñ∂Ê•≠CF: 295000, Á¥ØË®àCF: 595000 }
        ]
      };
      setSimulation(mockSimulation);

      // „É¶„Éº„Ç∂„Éº„ÅÆÊ®©Èôê„ÇíÁ¢∫Ë™ç
      if (user) {
        // TODO: ÊãõÂæÖÊÉÖÂ†±„Åã„ÇâÊ®©Èôê„ÇíÁ¢∫Ë™ç
        setCanComment(true); // ‰ªÆÂÆüË£Ö
      }

    } catch (err) {
      console.error('Error loading share data:', err);
      setError('„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    } finally {
      setLoading(false);
    }
  };

  const handleAcceptInvitation = async (invitationToken: string) => {
    const success = await acceptInvitation(invitationToken);
    if (success) {
      await loadShareData();
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Ë™≠„ÅøËæº„Åø‰∏≠...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">„Ç®„É©„Éº</h2>
          <p className="text-gray-600 mb-4">{error}</p>
          <button
            onClick={() => navigate('/')}
            className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700"
          >
            „Éõ„Éº„É†„Å´Êàª„Çã
          </button>
        </div>
      </div>
    );
  }

  if (!simulation || !property) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <AlertCircle className="h-12 w-12 text-yellow-500 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì</h2>
          <p className="text-gray-600">ÂÖ±Êúâ„Åï„Çå„Åü„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ</p>
        </div>
      </div>
    );
  }

  const simulationData = simulation.input_data;
  const results = simulation.result_data;

  return (
    <div className="min-h-screen bg-gray-50">
      {/* „Éò„ÉÉ„ÉÄ„Éº */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => navigate('/')}
                className="text-gray-600 hover:text-gray-900"
              >
                <ArrowLeft className="h-6 w-6" />
              </button>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">
                  {share?.title || `${property.property_name}„ÅÆ„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÁµêÊûú`}
                </h1>
                {share?.description && (
                  <p className="text-gray-600 mt-1">{share.description}</p>
                )}
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Users className="h-5 w-5 text-gray-400" />
              <span className="text-sm text-gray-600">ÂÖ±Êúâ„Éì„É•„Éº</span>
            </div>
          </div>
        </div>
      </div>

      {/* „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Ê®©Èôê„Å´Èñ¢„Åô„ÇãÈÄöÁü• */}
        {!user && (
          <div className="mb-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
            <div className="flex items-start">
              <Lock className="h-5 w-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0" />
              <div>
                <p className="text-sm text-blue-800">
                  „É≠„Ç∞„Ç§„É≥„Åô„Çã„Å®„ÄÅ„Ç≥„É°„É≥„Éà„ÅÆÊäïÁ®ø„ÇÑË©≥Á¥∞„Å™ÂàÜÊûê„ÅåÂèØËÉΩ„Å´„Å™„Çä„Åæ„Åô„ÄÇ
                </p>
                <button
                  onClick={() => navigate('/login')}
                  className="mt-2 text-sm font-medium text-blue-600 hover:text-blue-700"
                >
                  „É≠„Ç∞„Ç§„É≥„Åô„Çã ‚Üí
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Áâ©‰ª∂Âü∫Êú¨ÊÉÖÂ†± */}
        <div className="bg-white rounded-lg p-6 mb-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">Áâ©‰ª∂ÊÉÖÂ†±</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <span className="text-sm text-gray-500">Áâ©‰ª∂Âêç</span>
              <p className="text-gray-900">{property.property_name}</p>
            </div>
            <div>
              <span className="text-sm text-gray-500">ÊâÄÂú®Âú∞</span>
              <p className="text-gray-900">{property.location}</p>
            </div>
            <div>
              <span className="text-sm text-gray-500">Áâ©‰ª∂„Çø„Ç§„Éó</span>
              <p className="text-gray-900">{property.property_type}</p>
            </div>
            <div>
              <span className="text-sm text-gray-500">ÁØâÂπ¥Êï∞</span>
              <p className="text-gray-900">{new Date().getFullYear() - property.year_built}Âπ¥</p>
            </div>
          </div>
        </div>

        {/* ‰∏ªË¶ÅÊåáÊ®ô */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
          <MetricCard
            title="Ë°®Èù¢Âà©Âõû„Çä"
            value={results['Ë°®Èù¢Âà©Âõû„ÇäÔºà%Ôºâ'] || 0}
            unit="%"
            format="percentage"
          />
          <MetricCard
            title="IRR"
            value={results['IRRÔºà%Ôºâ'] || 0}
            unit="%"
            format="percentage"
          />
          <MetricCard
            title="CCR"
            value={results['CCRÔºà%Ôºâ'] || 0}
            unit="%"
            format="percentage"
          />
          <MetricCard
            title="ÊúàÈñìCF"
            value={results['ÊúàÈñì„Ç≠„É£„ÉÉ„Ç∑„É•„Éï„É≠„ÉºÔºàÂÜÜÔºâ'] || 0}
            unit="ÂÜÜ"
            format="currency"
          />
        </div>

        {/* „Ç≠„É£„ÉÉ„Ç∑„É•„Éï„É≠„Éº„ÉÅ„É£„Éº„Éà */}
        {simulation.cash_flow_table && (
          <div className="bg-white rounded-lg p-6 mb-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">
              „Ç≠„É£„ÉÉ„Ç∑„É•„Éï„É≠„ÉºÊé®Áßª
            </h2>
            <div className="h-64">
              <CashFlowChart data={simulation.cash_flow_table} />
            </div>
          </div>
        )}

        {/* Êñ∞„Åó„ÅÑ„Ç∑„É≥„Éó„É´„Ç≥„É°„É≥„ÉàÊ©üËÉΩ */}
        <div className="bg-white rounded-lg p-6 mb-6 border-l-4 border-green-500">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-semibold text-gray-900 flex items-center">
              <MessageCircle className="h-5 w-5 mr-2 text-green-600" />
              „Ç≥„É©„Éú„É¨„Éº„Ç∑„Éß„É≥„Ç≥„É°„É≥„Éà
              <span className="ml-2 text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full">
                ÂÆü„Éá„Éº„Çø
              </span>
            </h2>
          </div>
          <SimpleCommentSection
            pageId={`collaboration-${share?.id || token}`}
            title="„Ç≥„É©„Éú„É¨„Éº„Ç∑„Éß„É≥„Ç≥„É°„É≥„Éà"
          />
        </div>

        {/* ÂæìÊù•„ÅÆ„Ç≥„É°„É≥„Éà„Çª„ÇØ„Ç∑„Éß„É≥Ôºà„Éá„Éê„ÉÉ„Ç∞Áî®„ÉªÈñãÁô∫Áí∞Â¢É„ÅÆ„ÅøË°®Á§∫Ôºâ */}
        {process.env.NODE_ENV === 'development' && (
          <div className="bg-white rounded-lg p-6 border-l-4 border-blue-500">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-semibold text-gray-900 flex items-center">
                <MessageCircle className="h-5 w-5 mr-2 text-blue-600" />
                ÂæìÊù•„ÅÆ„Éá„Ç£„Çπ„Ç´„ÉÉ„Ç∑„Éß„É≥Ôºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
                <span className="ml-2 text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full">
                  Ë§áÈõë„Ç∑„Çπ„ÉÜ„É†
                </span>
              </h2>
            </div>
            {share && (
              <CommentSection
                shareId={share.id}
                canComment={canComment}
              />
            )}
          </div>
        )}
      </div>
    </div>
  );
}