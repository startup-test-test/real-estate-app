"""
‰∏çÂãïÁî£ÂèñÂºï‰æ°Ê†ºÊ§úÁ¥¢ Streamlit„Ç¢„Éó„É™
"""
import streamlit as st
import pandas as pd
from real_estate_client import RealEstateAPIClient
from datetime import datetime
import os
from dotenv import load_dotenv
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from scipy import stats
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import IsolationForest

# .env„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø
load_dotenv()

# „Éö„Éº„Ç∏Ë®≠ÂÆö
st.set_page_config(
    page_title="‰∏çÂãïÁî£ÂèñÂºï‰æ°Ê†ºÊ§úÁ¥¢",
    page_icon="üè¢",
    layout="wide"
)

# API„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆÂàùÊúüÂåñ
# „Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÂâäÈô§„Åó„Å¶ÊØéÂõûÊñ∞„Åó„ÅÑ„Ç§„É≥„Çπ„Çø„É≥„Çπ„Çí‰ΩúÊàêÔºà‰øÆÊ≠£ÂèçÊò†„ÅÆ„Åü„ÇÅÔºâ
def get_api_client():
    return RealEstateAPIClient()

client = get_api_client()

# Â∏ÇÂå∫Áî∫Êùë„Éá„Éº„Çø„Çí„Ç≠„É£„ÉÉ„Ç∑„É•
@st.cache_data(ttl=3600)  # 1ÊôÇÈñì„Ç≠„É£„ÉÉ„Ç∑„É•
def get_cities_cached(prefecture_code):
    return client.get_cities(prefecture_code)

# Âú∞Âå∫Âêç„Éá„Éº„Çø„Çí„Ç≠„É£„ÉÉ„Ç∑„É•
@st.cache_data(ttl=3600)  # 1ÊôÇÈñì„Ç≠„É£„ÉÉ„Ç∑„É•
def get_districts_cached(prefecture_code, municipality_code=None):
    return client.get_districts(prefecture_code, municipality_code)

# API„Ç≠„Éº„ÅÆÁ¢∫Ë™çÔºà„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆapi_key„ÇíÁõ¥Êé•„ÉÅ„Çß„ÉÉ„ÇØÔºâ
if not client.api_key:
    st.error("‚ö†Ô∏è API„Ç≠„Éº„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇGitHub Secrets„Å´VITE_REAL_ESTATE_API_KEY„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
    # „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíË°®Á§∫
    with st.expander("„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±"):
        st.write(f"os.getenv('VITE_REAL_ESTATE_API_KEY'): {os.getenv('VITE_REAL_ESTATE_API_KEY')}")
        st.write(f"os.getenv('MAIN_REAL_ESTATE_API_KEY'): {os.getenv('MAIN_REAL_ESTATE_API_KEY')}")
        st.write(f"os.getenv('REAL_ESTATE_API_KEY'): {os.getenv('REAL_ESTATE_API_KEY')}")
        st.write(f"client.api_key: {client.api_key}")
        st.write(f"ÁèæÂú®„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™: {os.getcwd()}")
        st.info("üí° GitHub Secrets„ÇíË®≠ÂÆö„Åó„ÅüÂæå„ÅØ„ÄÅCodespaces„ÅÆÂÜçËµ∑Âãï„ÅåÂøÖË¶Å„Å™Â†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ")
    st.stop()

# „Çµ„Ç§„Éâ„Éê„Éº„ÅßÊ§úÁ¥¢Êù°‰ª∂ÂÖ•Âäõ
st.sidebar.header("üîç Ê§úÁ¥¢Êù°‰ª∂")
st.sidebar.markdown("**\u203b „Åô„Åπ„Å¶„ÅÆÈ†ÖÁõÆ„ÅåÂøÖÈ†à„Åß„Åô**")

# ÈÉΩÈÅìÂ∫úÁúåÈÅ∏Êäû
prefectures = client.get_prefectures()
prefecture_names = [p["name"] for p in prefectures]
selected_prefecture = st.sidebar.selectbox(
    "ÈÉΩÈÅìÂ∫úÁúå *",
    prefecture_names,
    index=prefecture_names.index("Êù±‰∫¨ÈÉΩ") if "Êù±‰∫¨ÈÉΩ" in prefecture_names else 0,
    help="ÈÉΩÈÅìÂ∫úÁúå„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàÂøÖÈ†àÔºâ"
)

# ÈÅ∏Êäû„Åï„Çå„ÅüÈÉΩÈÅìÂ∫úÁúå„ÅÆ„Ç≥„Éº„Éâ„ÇíÂèñÂæó
selected_prefecture_code = None
for p in prefectures:
    if p["name"] == selected_prefecture:
        selected_prefecture_code = p["code"]
        break

# Â∏ÇÂå∫Áî∫ÊùëÈÅ∏ÊäûÔºàÂãïÁöÑ„Å´ÂèñÂæóÔºâ
cities = []
selected_city = None
selected_municipality_code = None

if selected_prefecture_code:
    with st.sidebar:
        with st.spinner("Â∏ÇÂå∫Áî∫Êùë„ÇíÂèñÂæó‰∏≠..."):
            cities = get_cities_cached(selected_prefecture_code)
    
    if cities:
        city_names = [c["name"] for c in cities]
        selected_city_name = st.sidebar.selectbox(
            "Â∏ÇÂå∫Áî∫Êùë *",
            city_names,
            index=0,
            help="Â∏ÇÂå∫Áî∫Êùë„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàÂøÖÈ†àÔºâ"
        )

        selected_city = selected_city_name
        # Â∏ÇÂå∫Áî∫Êùë„Ç≥„Éº„Éâ„ÇíÂèñÂæó
        for c in cities:
            if c["name"] == selected_city_name:
                selected_municipality_code = c["code"]
                break
    else:
        st.sidebar.error("„Åì„ÅÆÈÉΩÈÅìÂ∫úÁúå„Å´„ÅØ„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
        selected_city = None

# Âú∞Âå∫ÂêçÈÅ∏ÊäûÔºàÂãïÁöÑ„Å´ÂèñÂæóÔºâ
districts = []
selected_district = None

if selected_prefecture_code:
    with st.sidebar:
        with st.spinner("Âú∞Âå∫Âêç„ÇíÂèñÂæó‰∏≠..."):
            districts = get_districts_cached(selected_prefecture_code, selected_municipality_code)
    
    if districts:
        selected_district_name = st.sidebar.selectbox(
            "Âú∞Âå∫Âêç *",
            districts,
            index=0,
            help="Âú∞Âå∫Âêç„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàÂøÖÈ†àÔºâ"
        )

        selected_district = selected_district_name
    else:
        st.sidebar.error("„Åì„ÅÆ„Ç®„É™„Ç¢„Å´„ÅØÂú∞Âå∫Âêç„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
        selected_district = None

# ÂèñÂºïÁ®ÆÈ°ûÈÅ∏Êäû
st.sidebar.subheader("ÂèñÂºïÁ®ÆÈ°û *")
trade_type_options = {
    "01": "ÂúüÂú∞",
    "02": "Êà∏Âª∫„Å¶",
    "07": "„Éû„É≥„Ç∑„Éß„É≥"
}

# „É©„Ç∏„Ç™„Éú„Çø„É≥„ÅßÂçò‰∏ÄÈÅ∏Êäû„Å´Â§âÊõ¥Ôºà„Éá„Éï„Ç©„É´„Éà„ÅØÊà∏Âª∫„Å¶Ôºâ
selected_type_name = st.sidebar.radio(
    "Á®ÆÈ°û„ÇíÈÅ∏Êäû",
    options=list(trade_type_options.values()),
    index=1,  # Êà∏Âª∫„Å¶„Çí„Éá„Éï„Ç©„É´„Éà
    label_visibility="collapsed"
)

# ÈÅ∏Êäû„Åï„Çå„ÅüÂêçÂâç„Åã„Çâ„Ç≥„Éº„Éâ„ÇíÂèñÂæó
selected_type_code = [code for code, name in trade_type_options.items() if name == selected_type_name][0]
selected_types = [selected_type_code]

# Â∏åÊúõÂª∂Â∫äÈù¢Á©çÂÖ•ÂäõÔºàÂøÖÈ†àÔºâ
st.sidebar.subheader("Â∏åÊúõÂª∂Â∫äÈù¢Á©ç *")

target_area = st.sidebar.number_input(
    "Âª∂Â∫äÈù¢Á©ç(„é°) *",
    min_value=10,
    max_value=500,
    value=100,
    step=10,
    help="Êé¢„Åó„Åü„ÅÑÂª∂Â∫äÈù¢Á©ç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàÂøÖÈ†àÔºâ"
)

# Ë®±ÂÆπÁØÑÂõ≤„ÅØËá™ÂãïË®≠ÂÆöÔºà¬±10„é°Ôºâ
area_tolerance = 10

use_target_area = True  # Â∏∏„Å´ÊúâÂäπ

# Âª∫ÁØâÂπ¥ÂÖ•ÂäõÔºàÂøÖÈ†àÔºâ
st.sidebar.subheader("Âª∫ÁØâÂπ¥ *")

current_year = datetime.now().year
target_year = st.sidebar.number_input(
    "Âª∫ÁØâÂπ¥ *",
    min_value=1950,
    max_value=current_year,
    value=2015,
    step=1,
    help="Êé¢„Åó„Åü„ÅÑÂª∫ÁØâÂπ¥„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàÂøÖÈ†àÔºâ"
)

# Ë®±ÂÆπÁØÑÂõ≤„ÅØËá™ÂãïË®≠ÂÆöÔºà¬±5Âπ¥Ôºâ
year_tolerance = 5

use_target_year = True  # Â∏∏„Å´ÊúâÂäπ

# ÊúüÈñìÈÅ∏ÊäûÔºàÁõ¥Ëøë3Âπ¥ÂàÜ„ÇíËá™ÂãïË®≠ÂÆöÔºâ
st.sidebar.subheader("ÂèñÂºïÊôÇÊúü")
current_year = datetime.now().year

# Áõ¥Ëøë3Âπ¥ÂàÜ„ÇíËá™ÂãïÁöÑ„Å´Ë®≠ÂÆö
from_year = current_year - 3
to_year = current_year

# Ê§úÁ¥¢„Éú„Çø„É≥
search_button = st.sidebar.button("üîç Ê§úÁ¥¢ÂÆüË°å", type="primary", use_container_width=True)

# „É°„Ç§„É≥„Ç®„É™„Ç¢
if search_button:
    # ÂøÖÈ†àÈ†ÖÁõÆ„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
    errors = []
    if not selected_prefecture:
        errors.append("ÈÉΩÈÅìÂ∫úÁúå„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
    if not selected_city:
        errors.append("Â∏ÇÂå∫Áî∫Êùë„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
    if not selected_district:
        errors.append("Âú∞Âå∫Âêç„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
    if not selected_types:
        errors.append("ÂèñÂºïÁ®ÆÈ°û„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ")

    if errors:
        for error in errors:
            st.error(error)
    else:
        # Ê§úÁ¥¢ÂÆüË°å
        with st.spinner("Ê§úÁ¥¢‰∏≠..."):
            results = client.search_real_estate_prices(
                prefecture=selected_prefecture,
                city=selected_city,
                district=selected_district,
                trade_types=selected_types,
                from_year=from_year,
                from_quarter=1,  # 1Êúà„Åã„Çâ
                to_year=to_year,
                to_quarter=4  # 12Êúà„Åæ„ÅßÔºàÂÖ®ÂõõÂçäÊúüÔºâ
            )
        
        # „Ç®„É©„Éº„ÉÅ„Çß„ÉÉ„ÇØ
        if "error" in results:
            st.error(f"„Ç®„É©„Éº: {results['error']}")
        else:
            # Ê§úÁ¥¢ÁµêÊûú„ÅÆË°®Á§∫
            if results['search_count'] > 0:
                # „Éá„Éº„Çø„Éï„É¨„Éº„É†„Å´Â§âÊèõ
                df = pd.DataFrame(results['results'])

                # AI„Éà„É¨„É≥„ÉâÂàÜÊûê„Çª„ÇØ„Ç∑„Éß„É≥
                st.markdown("### üìä AIÂ∏ÇÂ†¥ÂàÜÊûê")

                # È°û‰ººÁâ©‰ª∂„ÅÆ‰æ°Ê†º„É¨„É≥„Ç∏ÂàÜÊûêÔºà„É¶„Éº„Ç∂„Éº„ÅÆÊ§úÁ¥¢Êù°‰ª∂„Å´Âü∫„Å•„ÅèÔºâ
                if use_target_area or use_target_year:
                    st.success("üéØ **„ÅÇ„Å™„Åü„ÅÆÊù°‰ª∂„Å´Ëøë„ÅÑÁâ©‰ª∂„ÅÆ‰æ°Ê†ºÂàÜÂ∏É**")

                    similar_properties = df.copy()
                    conditions_text = []

                    # Èù¢Á©çÊù°‰ª∂„Åß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
                    if use_target_area and target_area:
                        # ÈÅ∏Êäû„Åï„Çå„ÅüÂèñÂºïÁ®ÆÈ°û„Åå„Éû„É≥„Ç∑„Éß„É≥„Åã„Å©„ÅÜ„Åã„ÇíÂà§ÂÆö
                        is_mansion = '07' in selected_types  # 07„ÅØ„Éû„É≥„Ç∑„Éß„É≥„ÅÆ„Ç≥„Éº„Éâ
                        area_field = 'building_area' if is_mansion else 'area'
                        if area_field in similar_properties.columns:
                            similar_properties = similar_properties[
                                (similar_properties[area_field] >= target_area - area_tolerance) &
                                (similar_properties[area_field] <= target_area + area_tolerance)
                            ]
                            conditions_text.append(f"Âª∂Â∫äÈù¢Á©ç {target_area}¬±{area_tolerance}„é°")

                    # Âª∫ÁØâÂπ¥Êù°‰ª∂„Åß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
                    if use_target_year and target_year:
                        if 'building_year' in similar_properties.columns:
                            similar_properties = similar_properties[
                                (similar_properties['building_year'] >= target_year - year_tolerance) &
                                (similar_properties['building_year'] <= target_year + year_tolerance)
                            ]
                            conditions_text.append(f"Âª∫ÁØâÂπ¥ {target_year}¬±{year_tolerance}Âπ¥")

                    if len(similar_properties) > 0:
                        # Áµ±Ë®àÂÄ§„ÇíË®àÁÆó
                        similar_prices = similar_properties['price'] / 10000
                        q25 = similar_prices.quantile(0.25)
                        q50 = similar_prices.quantile(0.50)
                        q75 = similar_prices.quantile(0.75)

                        col_s1, col_s2, col_s3, col_s4 = st.columns(4)

                        with col_s1:
                            st.metric(
                                "‰∏ã‰Ωç25%",
                                f"{q25:,.0f}‰∏áÂÜÜ‰ª•‰∏ã",
                                help="È°û‰ººÁâ©‰ª∂„ÅÆ25%„Åå„Åì„ÅÆ‰æ°Ê†º‰ª•‰∏ã"
                            )

                        with col_s2:
                            st.metric(
                                "‰∏≠Â§ÆÂÄ§„É¨„É≥„Ç∏",
                                f"{q25:,.0f}„Äú{q75:,.0f}‰∏áÂÜÜ",
                                help="È°û‰ººÁâ©‰ª∂„ÅÆ50%„Åå„Åì„ÅÆÁØÑÂõ≤ÂÜÖ"
                            )

                        with col_s3:
                            st.metric(
                                "‰∏ä‰Ωç25%",
                                f"{q75:,.0f}‰∏áÂÜÜ‰ª•‰∏ä",
                                help="È°û‰ººÁâ©‰ª∂„ÅÆ25%„Åå„Åì„ÅÆ‰æ°Ê†º‰ª•‰∏ä"
                            )

                        with col_s4:
                            st.metric(
                                "ÂàÜÊûê„Çµ„É≥„Éó„É´Êï∞",
                                f"{len(similar_properties)}‰ª∂",
                                help="ÊåáÂÆöÊù°‰ª∂„Å´Ë©≤ÂΩì„Åô„ÇãÁâ©‰ª∂Êï∞"
                            )

                    else:
                        st.info("ÊåáÂÆöÊù°‰ª∂„Å´Ë©≤ÂΩì„Åô„ÇãÂèñÂºï‰∫ã‰æã„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")

                # Áµ±Ë®à„Éá„Éº„Çø„ÅÆË®àÁÆóÔºàÂ§ñ„ÇåÂÄ§„ÇíÈô§Â§ñÔºâ
                # IQRÊ≥ï„ÅßÂ§ñ„ÇåÂÄ§„ÇíÊ§úÂá∫
                Q1 = df['price'].quantile(0.25)
                Q3 = df['price'].quantile(0.75)
                IQR = Q3 - Q1

                # Â§ñ„ÇåÂÄ§„ÅÆÂ¢ÉÁïå„ÇíË®àÁÆóÔºàÈÄöÂ∏∏„ÅÆ1.5ÂÄç„Çí2.5ÂÄç„Å´Á∑©Âíå„Åó„Å¶„ÄÅ„ÅÇ„ÇãÁ®ãÂ∫¶„ÅÆÈ´òÈ°çÁâ©‰ª∂„ÅØÊÆã„ÅôÔºâ
                lower_bound = Q1 - 2.5 * IQR
                upper_bound = Q3 + 2.5 * IQR

                # Â§ñ„ÇåÂÄ§„ÇíÈô§„ÅÑ„Åü„Éá„Éº„Çø
                df_filtered = df[(df['price'] >= lower_bound) & (df['price'] <= upper_bound)]

                # Â§ñ„ÇåÂÄ§„ÇíÈô§„ÅÑ„ÅüÁµ±Ë®àÂÄ§„ÇíË®àÁÆó
                avg_price = df_filtered['price'].mean() / 10000  # ‰∏áÂÜÜÂçò‰Ωç
                median_price = df_filtered['price'].median() / 10000
                price_std = df_filtered['price'].std() / 10000
                total_count = len(df)
                outlier_count = len(df) - len(df_filtered)

                # ÂõõÂàÜ‰ΩçÊï∞„ÇíË®àÁÆóÔºàÂ§ñ„ÇåÂÄ§Èô§Â§ñÂæåÔºâ
                q25_price = df_filtered['price'].quantile(0.25) / 10000
                q75_price = df_filtered['price'].quantile(0.75) / 10000

                # „Éû„Éº„Ç±„ÉÉ„ÉàÂàÜÊûê„Çª„ÇØ„Ç∑„Éß„É≥
                st.markdown("### üìä **„Éû„Éº„Ç±„ÉÉ„ÉàÂàÜÊûê**")

                # ‰æ°Ê†º„Éà„É¨„É≥„Éâ„ÅÆË®àÁÆóÔºàÂ§ñ„ÇåÂÄ§„ÇíÈô§„ÅÑ„Åü„Éá„Éº„Çø„ÅßË®àÁÆóÔºâ+ Áµ±Ë®àÁöÑÊúâÊÑèÊÄß
                p_value = None
                r_squared = None
                trend_slope = 0

                if 'trade_period' in df_filtered.columns:
                    # ÂèñÂºïÊôÇÊúü„Åã„ÇâÂπ¥„ÇíÊäΩÂá∫
                    df_filtered['year'] = df_filtered['trade_period'].str.extract(r'(\d{4})').astype(float)

                    # „Éá„Éê„ÉÉ„Ç∞ÔºöÂèñÂºïÊôÇÊúü„ÅÆÂπ¥„ÇíÁ¢∫Ë™ç
                    unique_years = df_filtered['year'].dropna().unique()
                    unique_years_sorted = sorted(unique_years) if len(unique_years) > 0 else []

                    if len(unique_years_sorted) >= 2:
                        # Âπ¥„Åî„Å®„ÅÆÂπ≥Âùá‰æ°Ê†º„ÇíË®àÁÆó
                        yearly_prices = df_filtered.groupby('year')['price'].mean() / 10000

                        # Á∑öÂΩ¢ÂõûÂ∏∞ÂàÜÊûê„ÅßÁµ±Ë®àÁöÑÊúâÊÑèÊÄß„ÇíË®àÁÆó
                        x = np.array(yearly_prices.index.values)
                        y = np.array(yearly_prices.values)

                        if len(x) >= 2:
                            # scipy„ÅÆÁ∑öÂΩ¢ÂõûÂ∏∞
                            slope, intercept, r_value, p_value_calc, std_err = stats.linregress(x, y)
                            p_value = p_value_calc
                            r_squared = r_value ** 2
                            trend_slope = slope

                            # Âπ¥Ê¨°ÊàêÈï∑Áéá„ÇíÂÇæ„Åç„Åã„ÇâË®àÁÆóÔºàÂü∫Ê∫ñÂπ¥„ÅÆ‰æ°Ê†º„Å´ÂØæ„Åô„ÇãÂâ≤ÂêàÔºâ
                            base_price = yearly_prices.loc[unique_years_sorted[0]]
                            if base_price > 0:
                                growth_rate = (slope / base_price) * 100
                            else:
                                growth_rate = 0
                        else:
                            growth_rate = 0
                    else:
                        growth_rate = 0
                else:
                    growth_rate = 0
                    unique_years_sorted = []

                # Èù¢Á©ç„ÅÇ„Åü„Çä„ÅÆÂπ≥ÂùáÂçò‰æ°ÔºàÂ§ñ„ÇåÂÄ§„ÇíÈô§„ÅÑ„Åü„Éá„Éº„Çø„ÅßË®àÁÆóÔºâ
                if 'area' in df_filtered.columns:
                    df_filtered['unit_price'] = df_filtered['price'] / df_filtered['area'] / 10000  # ‰∏áÂÜÜ/„é°
                    avg_unit_price = df_filtered['unit_price'].mean()
                else:
                    avg_unit_price = 0

                # „É°„Éà„É™„ÇØ„Çπ„Çí4Âàó„ÅßË°®Á§∫
                col1, col2, col3, col4 = st.columns(4)

                with col1:
                    # „Éá„Éº„Çø„ÅÆÊúüÈñì„ÇíÂèñÂæó„Åó„Å¶‰æ°Ê†º„Éà„É¨„É≥„Éâ„ÇíË°®Á§∫ÔºàÁµ±Ë®àÁöÑÊúâÊÑèÊÄß‰ªò„ÅçÔºâ
                    if 'trade_period' in df_filtered.columns and df_filtered['trade_period'].notna().any():
                        # ÂÆüÈöõ„ÅÆÂπ¥„Éá„Éº„Çø„ÇíÁ¢∫Ë™ç
                        if len(unique_years_sorted) >= 2 and p_value is not None:
                            # ÂÆüÈöõ„ÅÆ„Éá„Éº„Çø„ÅÆÊúüÈñì„ÇíÂèñÂæó
                            periods_by_year = df_filtered.groupby('year')['trade_period'].first()
                            oldest_period = periods_by_year.loc[unique_years_sorted[0]]
                            newest_period = periods_by_year.loc[unique_years_sorted[-1]]

                            # Áµ±Ë®àÁöÑÊúâÊÑèÊÄß„Å´Âü∫„Å•„ÅèË°®Á§∫
                            if p_value < 0.05:  # Áµ±Ë®àÁöÑ„Å´ÊúâÊÑè
                                if growth_rate > 0:
                                    trend_value = f"üìà +{growth_rate:.1f}%/Âπ¥"
                                    significance = "ÊòéÁ¢∫„Å™‰∏äÊòáÂÇæÂêë"
                                else:
                                    trend_value = f"üìâ {growth_rate:.1f}%/Âπ¥"
                                    significance = "ÊòéÁ¢∫„Å™‰∏ãÈôçÂÇæÂêë"
                                delta_text = significance
                            else:  # Áµ±Ë®àÁöÑ„Å´ÊúâÊÑè„Åß„Å™„ÅÑ
                                trend_value = "‚Üí ¬±0%/Âπ¥"
                                delta_text = "‰æ°Ê†ºÂ§âÂãï„Å™„Åó"

                            years_list = ", ".join([str(int(y)) for y in unique_years_sorted])
                            help_text = f"""
                            üìä ÂàÜÊûêÁµêÊûú:
                            ‚Ä¢ „Éá„Éº„ÇøÊúüÈñì: {years_list}
                            ‚Ä¢ „Çµ„É≥„Éó„É´Êï∞: {len(df_filtered)}‰ª∂
                            ‚Ä¢ Âπ¥ÈñìÂ§âÂåñÁéá: {growth_rate:+.1f}%
                            """

                        elif len(unique_years_sorted) == 1:
                            # 1Âπ¥ÂàÜ„ÅÆ„Éá„Éº„Çø„ÅÆ„Åø
                            year_str = str(int(unique_years_sorted[0]))
                            trend_value = "ÁÆóÂá∫‰∏çÂèØ"
                            delta_text = f"{year_str}Âπ¥„ÅÆ„Éá„Éº„Çø„ÅÆ„Åø"
                            help_text = "Áµ±Ë®àÂàÜÊûê„Å´„ÅØË§áÊï∞Âπ¥„ÅÆ„Éá„Éº„Çø„ÅåÂøÖË¶Å„Åß„Åô"

                        else:
                            # Âπ¥„Éá„Éº„Çø„ÅåÂèñÂæó„Åß„Åç„Å™„ÅÑ
                            trend_value = "ÁÆóÂá∫‰∏çÂèØ"
                            delta_text = f"„Éá„Éº„Çø‰∏çË∂≥"
                            help_text = "Áµ±Ë®àÂàÜÊûê„Å´ÂøÖË¶Å„Å™„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì"
                    else:
                        trend_value = "ÁÆóÂá∫‰∏çÂèØ"
                        delta_text = "ÂèñÂºïÊôÇÊúü„Éá„Éº„Çø„Å™„Åó"
                        help_text = "API„É¨„Çπ„Éù„É≥„Çπ„Å´ÂèñÂºïÊôÇÊúü„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì"

                    st.metric(
                        label="AI‰æ°Ê†º„Éà„É¨„É≥„ÉâÂàÜÊûê",
                        value=trend_value,
                        delta=delta_text,
                        help=help_text
                    )

                with col2:
                    # ‰∏ã‰Ωç25%„ÅÆ‰æ°Ê†º
                    help_text = "Â∏ÇÂ†¥„ÅÆ25%„Åå„Åì„ÅÆ‰æ°Ê†º‰ª•‰∏ã"
                    if outlier_count > 0:
                        help_text += f"\nÔºàÂ§ñ„ÇåÂÄ§{outlier_count}‰ª∂Èô§Â§ñÊ∏àÔºâ"
                    st.metric(
                        label="‰∏ã‰Ωç25%",
                        value=f"{q25_price:,.0f}‰∏áÂÜÜ‰ª•‰∏ã",
                        delta=None,
                        help=help_text
                    )

                with col3:
                    # ‰∏≠Â§ÆÂÄ§„É¨„É≥„Ç∏
                    st.metric(
                        label="‰∏≠Â§ÆÂÄ§„É¨„É≥„Ç∏",
                        value=f"{q25_price:,.0f}„Äú{q75_price:,.0f}‰∏áÂÜÜ",
                        delta=None,
                        help=f"Â∏ÇÂ†¥„ÅÆ50%„Åå„Åì„ÅÆÁØÑÂõ≤ÂÜÖ\n‰∏≠Â§ÆÂÄ§: {median_price:,.0f}‰∏áÂÜÜ"
                    )

                with col4:
                    # ‰∏ä‰Ωç25%„ÅÆ‰æ°Ê†º
                    st.metric(
                        label="‰∏ä‰Ωç25%",
                        value=f"{q75_price:,.0f}‰∏áÂÜÜ‰ª•‰∏ä",
                        delta=None,
                        help=f"Â∏ÇÂ†¥„ÅÆ25%„Åå„Åì„ÅÆ‰æ°Ê†º‰ª•‰∏ä\nÂàÜÊûêÂØæË±°: {len(df_filtered)}/{total_count}‰ª∂"
                    )

                # Ë©≥Á¥∞ÂàÜÊûêÔºà„Ç®„Ç≠„Çπ„Éë„É≥„ÉÄ„Éº„ÅßÊäò„ÇäÁï≥„ÅøÂèØËÉΩÔºâ
                with st.expander("ü§ñ AIË©≥Á¥∞ÂàÜÊûê„É¨„Éù„Éº„Éà„ÇíË¶ã„Çã"):
                    # ÈßÖ„Åã„Çâ„ÅÆË∑ùÈõ¢ÂàÜÊûêÔºàÂ§ñ„ÇåÂÄ§„ÇíÈô§„ÅÑ„Åü„Éá„Éº„Çø„ÅßÂàÜÊûêÔºâ
                    if 'minutes_to_station' in df_filtered.columns:
                        station_stats = df_filtered.groupby(pd.cut(df_filtered['minutes_to_station'],
                                                         bins=[0, 5, 10, 15, 30, 100],
                                                         labels=['5ÂàÜ‰ª•ÂÜÖ', '6-10ÂàÜ', '11-15ÂàÜ', '16-30ÂàÜ', '30ÂàÜË∂Ö']))['price'].mean() / 10000

                    # ÁØâÂπ¥Êï∞ÂàÜÊûêÔºàÂ§ñ„ÇåÂÄ§„ÇíÈô§„ÅÑ„Åü„Éá„Éº„Çø„ÅßÂàÜÊûêÔºâ
                    if 'building_year' in df_filtered.columns:
                        current_year = pd.Timestamp.now().year
                        df_filtered['age'] = current_year - pd.to_numeric(df_filtered['building_year'], errors='coerce')
                        age_stats = df_filtered.groupby(pd.cut(df_filtered['age'],
                                                     bins=[0, 5, 10, 20, 30, 100],
                                                     labels=['ÁØâ5Âπ¥‰ª•ÂÜÖ', 'ÁØâ6-10Âπ¥', 'ÁØâ11-20Âπ¥', 'ÁØâ21-30Âπ¥', 'ÁØâ30Âπ¥Ë∂Ö'],
                                                     include_lowest=True))['price'].mean() / 10000

                    analysis_text = f"""
                    **üìä Áµ±Ë®à„Çµ„Éû„É™„Éº**
                    - ÂàÜÊûêÂØæË±°Áâ©‰ª∂Êï∞: {len(df_filtered)}‰ª∂ ÔºàÂÖ®{total_count}‰ª∂‰∏≠Ôºâ
                    """

                    if outlier_count > 0:
                        analysis_text += f"    - Â§ñ„ÇåÂÄ§„Å®„Åó„Å¶Èô§Â§ñ: {outlier_count}‰ª∂\n"

                    analysis_text += f"""    - Âπ≥Âùá‰æ°Ê†º: {avg_price:,.0f}‰∏áÂÜÜ
                    - ‰∏≠Â§ÆÂÄ§: {median_price:,.0f}‰∏áÂÜÜ
                    - ‰æ°Ê†ºÂ∏Ø: {df_filtered['price'].min()/10000:,.0f}‰∏áÂÜÜ „Äú {df_filtered['price'].max()/10000:,.0f}‰∏áÂÜÜ

                    **üìà ‰æ°Ê†ºÂãïÂêëÂàÜÊûê**
                    - Âπ¥ÈñìÊàêÈï∑Áéá: {growth_rate:.1f}%
                    - ‰æ°Ê†º„ÅÆ„Å∞„Çâ„Å§„ÅçÔºàÊ®ôÊ∫ñÂÅèÂ∑ÆÔºâ: ¬±{price_std:,.0f}‰∏áÂÜÜ
                    """

                    st.write(analysis_text)

                    if 'minutes_to_station' in df_filtered.columns and 'station_stats' in locals() and not station_stats.empty:
                        st.write("**üöâ ÈßÖË∑ùÈõ¢Âà•„ÅÆÂπ≥Âùá‰æ°Ê†º**")
                        for distance, price in station_stats.items():
                            if pd.notna(price):
                                st.write(f"- {distance}: {price:,.0f}‰∏áÂÜÜ")

                    if 'building_year' in df_filtered.columns and 'age_stats' in locals() and not age_stats.empty:
                        st.write("**üè¢ ÁØâÂπ¥Êï∞Âà•„ÅÆÂπ≥Âùá‰æ°Ê†º**")
                        for age_range, price in age_stats.items():
                            if pd.notna(price):
                                st.write(f"- {age_range}: {price:,.0f}‰∏áÂÜÜ")

                    # AIÊ©üËÉΩ1: Ëá™Âãï„ÇØ„É©„Çπ„Çø„É™„É≥„Ç∞
                    st.write("\n**üéØ AIËá™Âãï„ÇØ„É©„Çπ„Çø„É™„É≥„Ç∞ÂàÜÊûê**")
                    if len(df_filtered) >= 10:  # ÊúÄ‰Ωé10‰ª∂‰ª•‰∏ä„Åß„ÇØ„É©„Çπ„Çø„É™„É≥„Ç∞
                        try:
                            # „Éû„É≥„Ç∑„Éß„É≥„ÅÆÂ†¥Âêà„ÅØbuilding_area„ÄÅ„Åù„Çå‰ª•Â§ñ„ÅØarea„Çí‰ΩøÁî®
                            is_mansion = '07' in selected_types
                            area_column = 'building_area' if is_mansion else 'area'

                            # „ÇØ„É©„Çπ„Çø„É™„É≥„Ç∞Áî®„ÅÆÁâπÂæ¥Èáè„ÇíÊ∫ñÂÇô
                            clustering_features = []
                            feature_names = []

                            if 'price' in df_filtered.columns:
                                clustering_features.append(df_filtered['price'].values.reshape(-1, 1))
                                feature_names.append('‰æ°Ê†º')

                            if area_column in df_filtered.columns and df_filtered[area_column].notna().sum() > 5:
                                clustering_features.append(df_filtered[area_column].fillna(df_filtered[area_column].median()).values.reshape(-1, 1))
                                feature_names.append('Èù¢Á©ç')

                            if len(clustering_features) >= 1:
                                # ÁâπÂæ¥Èáè„ÇíÁµêÂêà„Åó„Å¶Ê®ôÊ∫ñÂåñ
                                X = np.hstack(clustering_features)
                                scaler = StandardScaler()
                                X_scaled = scaler.fit_transform(X)

                                # KMeans„ÇØ„É©„Çπ„Çø„É™„É≥„Ç∞Ôºà3„Ç∞„É´„Éº„ÉóÔºâ
                                n_clusters = min(3, len(df_filtered) // 3)  # „Éá„Éº„ÇøÊï∞„Å´Âøú„Åò„Å¶Ë™øÊï¥
                                kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
                                clusters = kmeans.fit_predict(X_scaled)

                                # „ÇØ„É©„Çπ„Çø„Åî„Å®„ÅÆÁµ±Ë®à„ÇíË®àÁÆó
                                df_filtered['cluster'] = clusters

                                # „ÇØ„É©„Çπ„ÇøÁµ±Ë®à„ÇíË®àÁÆóÔºàÈù¢Á©ç„Ç´„É©„É†„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøÔºâ
                                if area_column in df_filtered.columns:
                                    cluster_stats = df_filtered.groupby('cluster').agg({
                                        'price': ['mean', 'count'],
                                        area_column: 'mean'
                                    })
                                else:
                                    cluster_stats = df_filtered.groupby('cluster').agg({
                                        'price': ['mean', 'count']
                                    })

                                st.write(f"üìä {n_clusters}„Å§„ÅÆÁâ©‰ª∂„Ç∞„É´„Éº„Éó„ÇíËá™ÂãïÊ§úÂá∫:")

                                # ÂêÑ„ÇØ„É©„Çπ„Çø„ÅÆÂπ≥Âùá‰æ°Ê†º„ÇíÂÖà„Å´Ë®àÁÆó
                                cluster_avg_prices = []
                                for i in range(n_clusters):
                                    cluster_data = df_filtered[df_filtered['cluster'] == i]
                                    if len(cluster_data) > 0:
                                        cluster_avg_prices.append(cluster_data['price'].mean())
                                    else:
                                        cluster_avg_prices.append(0)

                                # ‰æ°Ê†ºÈ†Ü„Åß„ÇØ„É©„Çπ„Çø„Çí„ÇΩ„Éº„Éà
                                sorted_clusters = sorted(range(n_clusters), key=lambda x: cluster_avg_prices[x])

                                for idx, i in enumerate(sorted_clusters):
                                    cluster_data = df_filtered[df_filtered['cluster'] == i]
                                    if len(cluster_data) > 0:
                                        avg_price = cluster_data['price'].mean() / 10000
                                        count = len(cluster_data)
                                        percent = (count / len(df_filtered)) * 100

                                        # „Ç∞„É´„Éº„Éó„ÅÆÂêçÂâç„ÇíÊ±∫ÂÆöÔºà‰æ°Ê†ºÈ†Ü„ÅßÔºâ
                                        if n_clusters == 3:
                                            if idx == 0:
                                                group_name = "„Ç®„É≥„Éà„É™„Éº"
                                            elif idx == 2:
                                                group_name = "È´ò‰æ°Ê†ºÂ∏Ø"
                                            else:
                                                group_name = "‰∏≠‰æ°Ê†ºÂ∏Ø"
                                        else:
                                            group_name = f"„Ç∞„É´„Éº„Éó{idx+1}"

                                        st.write(f"‚Ä¢ **{group_name}** ({percent:.0f}%): Âπ≥Âùá{avg_price:,.0f}‰∏áÂÜÜ ({count}‰ª∂)")
                        except Exception as e:
                            st.write(f"„ÇØ„É©„Çπ„Çø„É™„É≥„Ç∞ÂàÜÊûê„Å´ÂøÖË¶Å„Å™„Éá„Éº„Çø„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô: {str(e)}")
                    else:
                        st.write("„ÇØ„É©„Çπ„Çø„É™„É≥„Ç∞ÂàÜÊûê„Å´„ÅØ10‰ª∂‰ª•‰∏ä„ÅÆ„Éá„Éº„Çø„ÅåÂøÖË¶Å„Åß„Åô")

                    # AIÊ©üËÉΩ2: Áï∞Â∏∏ÂÄ§Ê§úÂá∫
                    st.write("\n**‚ö†Ô∏è AIÁï∞Â∏∏ÂÄ§Ê§úÂá∫**")
                    if len(df_filtered) >= 5:  # ÊúÄ‰Ωé5‰ª∂‰ª•‰∏ä„ÅßÁï∞Â∏∏Ê§úÂá∫
                        try:
                            # Áï∞Â∏∏Ê§úÂá∫Áî®„ÅÆÁâπÂæ¥Èáè
                            anomaly_features = []
                            if 'price' in df_filtered.columns:
                                anomaly_features.append(df_filtered['price'].values.reshape(-1, 1))
                            if 'unit_price' in df_filtered.columns:
                                anomaly_features.append(df_filtered['unit_price'].values.reshape(-1, 1))

                            if len(anomaly_features) >= 1:
                                X_anomaly = np.hstack(anomaly_features)
                                X_anomaly_scaled = StandardScaler().fit_transform(X_anomaly)

                                # Isolation Forest„ÅßÁï∞Â∏∏Ê§úÂá∫
                                iso_forest = IsolationForest(contamination=0.1, random_state=42)
                                anomaly_predictions = iso_forest.fit_predict(X_anomaly_scaled)
                                anomaly_scores = iso_forest.score_samples(X_anomaly_scaled)

                                # Áï∞Â∏∏„Çπ„Ç≥„Ç¢„ÇíÊ≠£Ë¶èÂåñÔºà0-1„ÅÆÁØÑÂõ≤Ôºâ
                                anomaly_scores_normalized = (anomaly_scores - anomaly_scores.min()) / (anomaly_scores.max() - anomaly_scores.min())

                                # Áï∞Â∏∏Áâ©‰ª∂„ÇíÊ§úÂá∫
                                anomalies = df_filtered[anomaly_predictions == -1].copy()
                                anomalies['anomaly_score'] = anomaly_scores_normalized[anomaly_predictions == -1]

                                if len(anomalies) > 0:
                                    st.write(f"üìç Áµ±Ë®àÁöÑÂ§ñ„ÇåÂÄ§„Å®„Åó„Å¶{len(anomalies)}‰ª∂„ÇíÊ§úÂá∫:")
                                    for idx, row in anomalies.head(3).iterrows():
                                        price = row['price'] / 10000
                                        score = 1 - row['anomaly_score']  # „Çπ„Ç≥„Ç¢„ÇíÂèçËª¢ÔºàÈ´ò„ÅÑ„Åª„Å©Áï∞Â∏∏Ôºâ
                                        avg_ratio = price / avg_price
                                        st.write(f"‚Ä¢ ‰æ°Ê†º{price:,.0f}‰∏áÂÜÜ - Âú∞ÂüüÂπ≥Âùá„ÅÆ{avg_ratio:.1f}ÂÄç (Áï∞Â∏∏Â∫¶: {score:.2f})")
                                else:
                                    st.write("‚úÖ Áµ±Ë®àÁöÑ„Å´Áï∞Â∏∏„Å™Áâ©‰ª∂„ÅØÊ§úÂá∫„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü")
                        except Exception as e:
                            st.write("Áï∞Â∏∏Ê§úÂá∫ÂàÜÊûê„Å´ÂøÖË¶Å„Å™„Éá„Éº„Çø„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô")
                    else:
                        st.write("Áï∞Â∏∏Ê§úÂá∫ÂàÜÊûê„Å´„ÅØ5‰ª∂‰ª•‰∏ä„ÅÆ„Éá„Éº„Çø„ÅåÂøÖË¶Å„Åß„Åô")

                    st.info("""
                    üìå **ÈáçË¶Å‰∫ãÈ†Ö**
                    ‚Ä¢ Êú¨ÂàÜÊûê„ÅØÂÖ¨Èñã„Éá„Éº„Çø„ÅÆÁµ±Ë®àÂá¶ÁêÜ„Å´„Çà„ÇãÂèÇËÄÉÊÉÖÂ†±„Åß„Åô
                    ‚Ä¢ ‰∏çÂãïÁî£„ÅÆÊäïË≥áÂà§Êñ≠„ÇÑË≥ºÂÖ•„ÅÆÊé®Â•®„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì
                    ‚Ä¢ ÂÄãÂà•Áâ©‰ª∂„ÅÆÈÅ©Ê≠£‰æ°Ê†º„ÇíÁ§∫„Åô„ÇÇ„ÅÆ„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì
                    ‚Ä¢ ÂÆüÈöõ„ÅÆÂèñÂºï„Å´„ÅØÂÆÖÂú∞Âª∫Áâ©ÂèñÂºïÂ£´„Å´„ÅîÁõ∏Ë´á„Åè„Å†„Åï„ÅÑ
                    """)

                # È°û‰ººÁâ©‰ª∂„ÅÆË©≥Á¥∞Ë°®ÔºàÊúÄÂ§ß10‰ª∂Ë°®Á§∫„ÄÅ1Áï™‰∏ä„Å´ÈÖçÁΩÆÔºâ
                # Ë°®Á§∫Áî®„ÅÆ„Éá„Éº„Çø„Éï„É¨„Éº„É†„Çí‰ΩúÊàê
                table_df = df.copy()

                # Â∏åÊúõÈù¢Á©ç„Åß„ÅÆËâ≤ÂàÜ„ÅëÊ∫ñÂÇô
                if use_target_area and target_area:
                    # ÂèñÂºïÁ®ÆÈ°û„Å´Âøú„Åò„Å¶ÈÅ©Âàá„Å™Èù¢Á©ç„Éï„Ç£„Éº„É´„Éâ„ÇíÈÅ∏Êäû
                    if selected_type_code == "01":  # ÂúüÂú∞
                        area_field = 'land_area'
                    else:  # Êà∏Âª∫„Å¶„Éª„Éû„É≥„Ç∑„Éß„É≥
                        area_field = 'building_area'

                    # Â∏åÊúõÈù¢Á©ç„Å®„ÅÆÂ∑Æ„ÇíË®àÁÆó
                    table_df['area_diff'] = abs(table_df[area_field] - target_area)
                    table_df['is_target'] = table_df['area_diff'] <= area_tolerance

                    # Â∏åÊúõÈù¢Á©ç„Å´Ëøë„ÅÑÈ†Ü„Åß„ÇΩ„Éº„Éà
                    table_df = table_df.sort_values('area_diff')
                else:
                    table_df = table_df.sort_values('building_area')  # Âª∂Â∫äÈù¢Á©ç„Åß„ÇΩ„Éº„Éà

                # ÊúÄÂ§ß10‰ª∂„Å´Âà∂Èôê
                table_df_limited = table_df.head(10)

                # Ë°®Á§∫„Åô„ÇãÂàó„ÇíÈôêÂÆö
                display_table = pd.DataFrame({
                    'No.': range(1, len(table_df_limited) + 1),
                    'ÊâÄÂú®Âú∞': table_df_limited['location'].values,
                    'ÂèñÂºïÊôÇÊúü': table_df_limited['trade_period'].values,
                    'ÂèñÂºï‰æ°Ê†º': table_df_limited['price_formatted'].values,
                    'ÂúüÂú∞Èù¢Á©ç(„é°)': table_df_limited['land_area'].astype(int).values,
                    'Âª∂Â∫äÈù¢Á©ç(„é°)': table_df_limited['building_area'].astype(int).values,
                    'ÈñìÂèñ„Çä': table_df_limited['floor_plan'].fillna('-').replace('', '-').values,
                    'ÂâçÈù¢ÈÅìË∑Ø': (table_df_limited['road_type'] + ' ' + table_df_limited['breadth'].astype(str) + 'm').values
                })

                # „Çø„Ç§„Éà„É´Ë°®Á§∫
                st.subheader("üìã È°û‰ººÁâ©‰ª∂")

                # HTML„ÉÜ„Éº„Éñ„É´„ÅÆ„Çπ„Çø„Ç§„É´Ë®≠ÂÆö
                table_style = """
                <style>
                .property-table {
                    width: 100%;
                    border-collapse: collapse;
                    margin-top: 20px;
                    background-color: white;
                }
                .property-table th {
                    background-color: white;
                    color: black;
                    text-align: left;
                    padding: 10px;
                    font-size: 18px;
                    font-weight: bold;
                    border-bottom: 2px solid #ddd;
                }
                .property-table td {
                    background-color: white;
                    color: black;
                    text-align: left;
                    padding: 10px;
                    font-size: 18px;
                    border-bottom: 1px solid #eee;
                }
                .property-table tr:hover td {
                    background-color: #fafafa;
                }
                </style>
                """

                # HTML„ÉÜ„Éº„Éñ„É´„ÅÆ‰ΩúÊàê
                html_table = table_style + '<table class="property-table">'
                html_table += '<thead><tr>'
                for col in display_table.columns:
                    html_table += f'<th>{col}</th>'
                html_table += '</tr></thead><tbody>'

                for _, row in display_table.iterrows():
                    html_table += '<tr>'
                    for val in row:
                        html_table += f'<td>{val}</td>'
                    html_table += '</tr>'
                html_table += '</tbody></table>'

                # HTML„ÉÜ„Éº„Éñ„É´„ÇíË°®Á§∫
                st.markdown(html_table, unsafe_allow_html=True)
                

                # ÂèñÂºïÁ®ÆÈ°û„ÅåÂúüÂú∞„Åã„Å©„ÅÜ„ÅãÂà§ÂÆö
                is_land = selected_type_code == "01"  # 01„ÅåÂúüÂú∞„ÅÆ„Ç≥„Éº„Éâ

                if is_land:
                    # ÂúüÂú∞Â∞ÇÁî®„ÅÆÂàÜÊûê„Ç∞„É©„Éï
                    st.subheader("üìà ÂúüÂú∞Èù¢Á©ç„Å®ÊàêÁ¥Ñ‰æ°Ê†º„ÅÆÂàÜÂ∏É")

                    # ÂúüÂú∞Èù¢Á©ç„Åå„ÅÇ„ÇãÁâ©‰ª∂„ÅÆ„Åø„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
                    land_df = df[df['land_area'] > 0].copy()

                    if len(land_df) > 0:
                        import matplotlib.pyplot as plt
                        import japanize_matplotlib

                        fig, ax = plt.subplots(figsize=(10, 4))

                        # Êï£Â∏ÉÂõ≥„Çí‰ΩúÊàêÔºàÂ∏åÊúõÈù¢Á©ç„Å´Âøú„Åò„Å¶Ëâ≤ÂàÜ„ÅëÔºâ
                        if use_target_area and target_area:
                            # Â∏åÊúõÈù¢Á©ç„Å®„ÅÆÂ∑Æ„ÇíË®àÁÆó
                            land_df['area_diff'] = abs(land_df['land_area'] - target_area)
                            land_df['is_target'] = land_df['area_diff'] <= area_tolerance

                            # Ëâ≤ÂàÜ„Åë„Åó„Å¶Êï£Â∏ÉÂõ≥„Çí‰ΩúÊàê
                            # ÁØÑÂõ≤Â§ñ„ÅÆÁâ©‰ª∂
                            non_target = land_df[~land_df['is_target']]
                            ax.scatter(
                                non_target['land_area'],
                                non_target['price'] / 10000,
                                alpha=0.4,
                                s=30,
                                color='lightgray',
                                edgecolors='gray',
                                linewidth=0.5,
                                label='ÁØÑÂõ≤Â§ñ'
                            )

                            # ÁØÑÂõ≤ÂÜÖ„ÅÆÁâ©‰ª∂ÔºàÂ∏åÊúõÈù¢Á©ç„Å´Ëøë„ÅÑ„Åª„Å©ÊøÉ„ÅÑËâ≤Ôºâ
                            target = land_df[land_df['is_target']]
                            if len(target) > 0:
                                # Ë∑ùÈõ¢„Å´Âøú„Åò„Å¶Ëâ≤„ÅÆÊøÉ„Åï„ÇíË™øÊï¥
                                colors = plt.cm.Greens(1 - target['area_diff'] / area_tolerance)
                                ax.scatter(
                                    target['land_area'],
                                    target['price'] / 10000,
                                    alpha=0.8,
                                    s=80,
                                    c=colors,
                                    edgecolors='darkgreen',
                                    linewidth=1.5,
                                    label=f'{target_area}¬±{area_tolerance}„é°'
                                )

                                # Â∫É„Åï„Å´Á∏¶Á∑ö„ÇíËøΩÂä†
                                ax.axvline(x=target_area, color='red', linestyle='--', linewidth=1, alpha=0.5, label=f'Â∫É„Åï {target_area}„é°')
                                ax.axvspan(target_area-area_tolerance, target_area+area_tolerance, alpha=0.1, color='green')

                                ax.legend(loc='upper left')
                        else:
                            scatter = ax.scatter(
                                land_df['land_area'],
                                land_df['price'] / 10000,
                                alpha=0.6,
                                s=50,
                                color='lightgreen',
                                edgecolors='darkgreen',
                                linewidth=0.5
                            )

                        # YËª∏„Çí1000‰∏áÂÜÜÂàª„Åø„ÅßË®≠ÂÆö
                        ax.set_ylim(0, 10000)
                        y_ticks = list(range(0, 11000, 1000))
                        ax.set_yticks(y_ticks)
                        ax.set_yticklabels([f'{y:,}' for y in y_ticks])

                        # XËª∏„Çí50„é°Âàª„Åø„ÅßË®≠ÂÆö
                        max_area = int((land_df['land_area'].max() + 50) / 50) * 50
                        min_area = int(land_df['land_area'].min() / 50) * 50
                        x_ticks = list(range(min_area, max_area + 1, 50))
                        ax.set_xticks(x_ticks)

                        # „Ç∞„É™„ÉÉ„ÉâÁ∑ö„ÇíËøΩÂä†
                        ax.grid(True, alpha=0.3, linestyle='--')

                        # „É©„Éô„É´
                        ax.set_xlabel('ÂúüÂú∞Èù¢Á©çÔºà„é°Ôºâ', fontsize=14)
                        ax.set_ylabel('‰æ°Ê†ºÔºà‰∏áÂÜÜÔºâ', fontsize=14)
                        ax.set_title(f'{results["search_conditions"]["location"]}„ÅÆÂúüÂú∞Èù¢Á©ç„Å®ÊàêÁ¥Ñ‰æ°Ê†º„ÅÆÂàÜÂ∏É',
                                   fontsize=14, pad=20)

                        plt.tight_layout()
                        st.pyplot(fig)

                        # ÂúüÂú∞Èù¢Á©çÂà•‰æ°Ê†ºÂàÜÂ∏É„ÅÆ„Éí„Éº„Éà„Éû„ÉÉ„Éó
                        st.subheader("üìä ÂúüÂú∞Èù¢Á©çÂà•‰æ°Ê†ºÂàÜÂ∏É")

                        # ‰æ°Ê†ºÂ∏Ø„ÇíÂÆöÁæ©Ôºà‰∏áÂÜÜÔºâ- 1000‰∏áÂÜÜÂàª„Åø
                        price_bins = list(range(0, 11000, 1000))
                        price_bins.append(float('inf'))
                        price_labels = []
                        for i in range(len(price_bins)-1):
                            if price_bins[i+1] == float('inf'):
                                price_labels.append('10,000~')
                            else:
                                price_labels.append(f'{price_bins[i]:,}~{price_bins[i+1]:,}')

                        # ÂúüÂú∞Èù¢Á©çÂ∏Ø„ÇíÂÆöÁæ©Ôºà„é°Ôºâ- 50„é°Âàª„Åø
                        area_bins = list(range(50, min(500, int(land_df['land_area'].max()) + 50), 50))
                        if land_df['land_area'].max() > 500:
                            area_bins.append(int(land_df['land_area'].max()) + 50)
                        area_labels = [f"{area_bins[i]}" for i in range(len(area_bins)-1)]

                        # „Éá„Éº„Çø„ÇíÂàÜÈ°û
                        land_df_copy = land_df.copy()
                        land_df_copy['price_range'] = pd.cut(land_df_copy['price']/10000, bins=price_bins, labels=price_labels, right=False)
                        land_df_copy['area_range'] = pd.cut(land_df_copy['land_area'], bins=area_bins, labels=area_labels, right=False)

                        # „ÇØ„É≠„ÇπÈõÜË®àË°®„Çí‰ΩúÊàê
                        cross_table = pd.crosstab(land_df_copy['price_range'], land_df_copy['area_range']).fillna(0)

                        # Âàó„ÅÆÈ†ÜÂ∫è„ÇíË™øÊï¥
                        available_cols = [col for col in area_labels if col in cross_table.columns]
                        cross_table = cross_table.reindex(columns=available_cols, fill_value=0)

                        # Ë°å„ÅÆÈ†ÜÂ∫è„ÇíË™øÊï¥
                        available_rows = [row for row in price_labels if row in cross_table.index]
                        cross_table = cross_table.reindex(index=available_rows, fill_value=0)
                        # YËª∏„ÇíÂèçËª¢
                        cross_table = cross_table.iloc[::-1]

                        # Ë°®Á§∫Áî®„Å´Êï¥ÂΩ¢
                        cross_table_display = cross_table.copy()
                        cross_table_display.index.name = '‰æ°Ê†º(‰∏áÂÜÜ)'
                        cross_table_display.columns.name = 'ÂúüÂú∞Èù¢Á©ç(„é°)'

                        # „Éí„Éº„Éà„Éû„ÉÉ„Éó„ÅßË°®Á§∫
                        import numpy as np

                        fig, ax = plt.subplots(figsize=(12, 4))

                        # „Éí„Éº„Éà„Éû„ÉÉ„Éó‰ΩúÊàê
                        im = ax.imshow(cross_table_display.values, cmap='Greens', aspect='auto')

                        # Ëª∏„É©„Éô„É´Ë®≠ÂÆö
                        ax.set_xticks(np.arange(len(cross_table_display.columns)))
                        ax.set_yticks(np.arange(len(cross_table_display.index)))
                        ax.set_xticklabels(cross_table_display.columns)
                        ax.set_yticklabels(cross_table_display.index)

                        # Ëª∏„É©„Éô„É´
                        ax.set_xlabel('ÂúüÂú∞Èù¢Á©ç(„é°)')
                        ax.set_ylabel('‰æ°Ê†º(‰∏áÂÜÜ)')

                        # ÂêÑ„Çª„É´„Å´Êï∞ÂÄ§„ÇíË°®Á§∫
                        for i in range(len(cross_table_display.index)):
                            for j in range(len(cross_table_display.columns)):
                                value = cross_table_display.iloc[i, j]
                                if value > 0:
                                    text = ax.text(j, i, int(value), ha="center", va="center",
                                                 color="black" if value < cross_table_display.values.max()/2 else "white",
                                                 fontsize=14, fontweight='bold')

                        # „Ç∞„É™„ÉÉ„ÉâÁ∑ö„ÇíËøΩÂä†
                        ax.set_xticks(np.arange(len(cross_table_display.columns)+1)-.5, minor=True)
                        ax.set_yticks(np.arange(len(cross_table_display.index)+1)-.5, minor=True)
                        ax.grid(which="minor", color="white", linestyle='-', linewidth=2)

                        plt.title(f'{results["search_conditions"]["location"]}„ÅÆÂúüÂú∞Èù¢Á©çÂà•‰æ°Ê†ºÂàÜÂ∏É', fontsize=14, pad=20)
                        plt.tight_layout()

                        st.pyplot(fig)
                    else:
                        st.warning("ÂúüÂú∞Èù¢Á©ç„ÅÆ„Éá„Éº„Çø„Åå„ÅÇ„ÇãÁâ©‰ª∂„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ")

                else:
                    # Êà∏Âª∫„Å¶„Éª„Éû„É≥„Ç∑„Éß„É≥Áî®„ÅÆÂàÜÊûê„Ç∞„É©„ÉïÔºàÂª∂Â∫äÈù¢Á©ç/Â∞ÇÊúâÈù¢Á©çÔºâ
                    area_label = "Â∞ÇÊúâÈù¢Á©ç" if selected_type_code == "07" else "Âª∂Â∫äÈù¢Á©ç"

                    # Âª∂Â∫äÈù¢Á©ç„Åå„ÅÇ„ÇãÁâ©‰ª∂„ÅÆ„Åø„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
                    scatter_df = df[df['building_area'] > 0].copy()

                    if len(scatter_df) > 0:
                        # Plotly„Åß„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å™Êï£Â∏ÉÂõ≥„Çí‰ΩúÊàê
                        scatter_df['price_man'] = scatter_df['price'] / 10000

                        # ÂõõÂçäÊúü„ÇíÊúàË°®Ë®ò„Å´Â§âÊèõ„Åô„ÇãÈñ¢Êï∞
                        def quarter_to_months(period_str):
                            if pd.isna(period_str):
                                return period_str
                            period_str = str(period_str)
                            if "Á¨¨1ÂõõÂçäÊúü" in period_str:
                                return period_str.replace("Á¨¨1ÂõõÂçäÊúü", "1Êúà„Äú3Êúà")
                            elif "Á¨¨2ÂõõÂçäÊúü" in period_str:
                                return period_str.replace("Á¨¨2ÂõõÂçäÊúü", "4Êúà„Äú6Êúà")
                            elif "Á¨¨3ÂõõÂçäÊúü" in period_str:
                                return period_str.replace("Á¨¨3ÂõõÂçäÊúü", "7Êúà„Äú9Êúà")
                            elif "Á¨¨4ÂõõÂçäÊúü" in period_str:
                                return period_str.replace("Á¨¨4ÂõõÂçäÊúü", "10Êúà„Äú12Êúà")
                            return period_str

                        # „Éõ„Éê„ÉºÊôÇ„Å´Ë°®Á§∫„Åô„ÇãÊÉÖÂ†±„ÇíÊ∫ñÂÇô
                        scatter_df['hover_text'] = (
                            'ÊâÄÂú®Âú∞: ' + scatter_df['location'] + '<br>' +
                            '‰æ°Ê†º: ' + scatter_df['price_formatted'] + '<br>' +
                            f'{area_label}: ' + scatter_df['building_area'].astype(str) + '„é°<br>' +
                            '„é°Âçò‰æ°: ' + scatter_df['unit_price_formatted'] + '<br>' +
                            'Âª∫ÁØâÂπ¥: ' + scatter_df['build_year'].astype(str) + '<br>' +
                            'ÈñìÂèñ„Çä: ' + scatter_df['floor_plan'].astype(str) + '<br>' +
                            'ÂèñÂºïÊôÇÊúü: ' + scatter_df['trade_period'].apply(quarter_to_months).astype(str)
                        )

                        fig = go.Figure()

                        if use_target_area and target_area:
                            # Â∏åÊúõÈù¢Á©ç„Å®„ÅÆÂ∑Æ„ÇíË®àÁÆó
                            scatter_df['area_diff'] = abs(scatter_df['building_area'] - target_area)
                            scatter_df['is_target'] = scatter_df['area_diff'] <= area_tolerance

                            # ÁØÑÂõ≤Â§ñ„ÅÆÁâ©‰ª∂
                            non_target = scatter_df[~scatter_df['is_target']]
                            if len(non_target) > 0:
                                fig.add_trace(go.Scatter(
                                    x=non_target['building_area'],
                                    y=non_target['price_man'],
                                    mode='markers',
                                    name='„Åù„ÅÆ‰ªñ',
                                    marker=dict(
                                        color='#4169E1',
                                        size=8,
                                        opacity=0.6,
                                        line=dict(color='#000080', width=0.5)
                                    ),
                                    text=non_target['hover_text'],
                                    hovertemplate='%{text}<extra></extra>'
                                ))

                            # ÁØÑÂõ≤ÂÜÖ„ÅÆÁâ©‰ª∂
                            target = scatter_df[scatter_df['is_target']]
                            if len(target) > 0:
                                fig.add_trace(go.Scatter(
                                    x=target['building_area'],
                                    y=target['price_man'],
                                    mode='markers',
                                    name=f'{target_area}¬±{area_tolerance}„é°',
                                    marker=dict(
                                        color='#FF4500',
                                        size=12,
                                        opacity=0.8,
                                        line=dict(color='#8B0000', width=1),
                                    ),
                                    text=target['hover_text'],
                                    hovertemplate='%{text}<extra></extra>'
                                ))

                                # Â∏åÊúõÈù¢Á©ç„Å´Á∏¶Á∑ö„ÇíËøΩÂä†
                                fig.add_vline(x=target_area, line_dash="dash", line_color="red",
                                            annotation_text=f"Â∫É„Åï {target_area}„é°", annotation_position="top")

                                # Ë®±ÂÆπÁØÑÂõ≤„ÇíËÉåÊôØËâ≤„ÅßË°®Á§∫
                                fig.add_vrect(x0=target_area-area_tolerance, x1=target_area+area_tolerance,
                                            fillcolor="blue", opacity=0.1, layer="below", line_width=0)
                        else:
                            # ÈÄöÂ∏∏„ÅÆÊï£Â∏ÉÂõ≥
                            fig.add_trace(go.Scatter(
                                x=scatter_df['building_area'],
                                y=scatter_df['price_man'],
                                mode='markers',
                                name='Áâ©‰ª∂',
                                marker=dict(
                                    color='#FFD700',
                                    size=10,
                                    opacity=0.7,
                                    line=dict(color='#FFA500', width=1)
                                ),
                                text=scatter_df['hover_text'],
                                hovertemplate='%{text}<extra></extra>'
                            ))

                        # „É¨„Ç§„Ç¢„Ç¶„Éà„ÅÆË®≠ÂÆö
                        fig.update_layout(
                            title=None,
                            xaxis_title={
                                'text': f'{area_label}Ôºà„é°Ôºâ',
                                'font': {'color': 'black', 'size': 14}
                            },
                            yaxis_title=None,
                            height=500,
                            hovermode='closest',
                            showlegend=True,
                            plot_bgcolor='white',
                            paper_bgcolor='white',
                            font=dict(color='black'),
                            margin=dict(t=40, b=20, l=20, r=20),
                            xaxis=dict(
                                gridcolor='#E0E0E0',
                                gridwidth=0.5,
                                dtick=10,
                                range=[max(50, scatter_df['building_area'].min() - 5),
                                      min(200, scatter_df['building_area'].max() + 5)],
                                showgrid=True,
                                zeroline=True,
                                zerolinecolor='#E0E0E0',
                                showline=True,
                                linecolor='black',
                                linewidth=1,
                                tickfont=dict(color='black', size=14),
                                tickcolor='black'
                            ),
                            yaxis=dict(
                                gridcolor='#E0E0E0',
                                gridwidth=0.5,
                                dtick=1000,
                                range=[0, min(10000, scatter_df['price_man'].max() + 500)],
                                showgrid=True,
                                zeroline=True,
                                zerolinecolor='#E0E0E0',
                                showline=True,
                                linecolor='black',
                                linewidth=1,
                                tickfont=dict(color='black', size=14),
                                tickcolor='black',
                                tickformat=',d',
                                ticksuffix='‰∏áÂÜÜ',
                                tickvals=list(range(0, int(min(10000, scatter_df['price_man'].max() + 500)) + 1, 1000)),
                                ticktext=[f'{i:,}‰∏áÂÜÜ' if i > 0 else '0' for i in range(0, int(min(10000, scatter_df['price_man'].max() + 500)) + 1, 1000)]
                            )
                        )


                        st.markdown("<h4>1. Âª∂„ÅπÂ∫ä„Å®‰æ°Ê†º</h4>", unsafe_allow_html=True)
                        st.plotly_chart(fig, use_container_width=True, config={'displayModeBar': False})

                    
                    # Èù¢Á©ç„Å®‰æ°Ê†º„ÅÆÂàÜÂ∏ÉË°®Ôºà„ÇØ„É≠„ÇπÈõÜË®àÔºâ
                    
                    # ‰æ°Ê†ºÂ∏Ø„ÇíÂÆöÁæ©Ôºà‰∏áÂÜÜÔºâ- 1000‰∏áÂÜÜÂàª„Åø
                    price_bins = list(range(0, 11000, 1000))  # 0, 1000, 2000, ..., 10000
                    price_bins.append(float('inf'))  # 10000‰∏áÂÜÜ‰ª•‰∏ä
                    price_labels = []
                    for i in range(len(price_bins)-1):
                        if price_bins[i+1] == float('inf'):
                            price_labels.append('10,000‰∏áÂÜÜ~')
                        elif price_bins[i] == 0:
                            price_labels.append(f'0~1,000‰∏áÂÜÜ')
                        else:
                            price_labels.append(f'{price_bins[i]:,}‰∏áÂÜÜ')

                    # Èù¢Á©çÂ∏Ø„ÇíÂÆöÁæ©Ôºà„é°Ôºâ- 10„é°Âàª„Åø
                    area_bins = list(range(50, 210, 10))  # 50, 60, 70, ..., 200
                    area_bins.append(210)  # ÊúÄÂæå„ÅÆbin„ÇíËøΩÂä†
                    area_labels = [f"{area_bins[i]}" for i in range(len(area_bins)-1)]
                    
                    # „Éá„Éº„Çø„ÇíÂàÜÈ°û
                    scatter_df_copy = scatter_df.copy()
                    scatter_df_copy['price_range'] = pd.cut(scatter_df_copy['price']/10000, bins=price_bins, labels=price_labels, right=False)
                    scatter_df_copy['area_range'] = pd.cut(scatter_df_copy['building_area'], bins=area_bins, labels=area_labels, right=False)
                    
                    # „ÇØ„É≠„ÇπÈõÜË®àË°®„Çí‰ΩúÊàê
                    cross_table = pd.crosstab(scatter_df_copy['price_range'], scatter_df_copy['area_range']).fillna(0)
                    
                    # Âàó„ÅÆÈ†ÜÂ∫è„ÇíË™øÊï¥
                    available_cols = [col for col in area_labels if col in cross_table.columns]
                    cross_table = cross_table.reindex(columns=available_cols, fill_value=0)
                    
                    # Ë°å„ÅÆÈ†ÜÂ∫è„ÇíË™øÊï¥Ôºà‰∏ã„Åã„Çâ‰∏ä„Å∏Ôºö0‰∏áÂÜÜ‚Üí10,000‰∏áÂÜÜÔºâ
                    available_rows = [row for row in price_labels if row in cross_table.index]
                    cross_table = cross_table.reindex(index=available_rows, fill_value=0)
                    # YËª∏„ÇíÂèçËª¢Ôºà‰∏ä„Åã„Çâ‰∏ã„Å∏‰æ°Ê†º„Åå‰∏ã„Åå„Çã„Çà„ÅÜ„Å´Ôºâ- ‰∏ã„Åå0ÂÜÜ„ÄÅ‰∏ä„ÅåÈ´òÈ°ç
                    cross_table = cross_table.iloc[::-1]
                    
                    # Ë°®Á§∫Áî®„Å´Êï¥ÂΩ¢
                    cross_table_display = cross_table.copy()
                    cross_table_display.index.name = '‰æ°Ê†º(‰∏áÂÜÜ)'
                    cross_table_display.columns.name = f'{area_label}(„é°)'
                    
                    # Plotly„Åß„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å™„Éí„Éº„Éà„Éû„ÉÉ„Éó„Çí‰ΩúÊàê
                    import plotly.graph_objects as go
                    import numpy as np

                    # „Éõ„Éê„Éº„ÉÜ„Ç≠„Çπ„Éà„Çí‰ΩúÊàê
                    hover_text = []
                    for i in range(len(cross_table_display.index)):
                        row_text = []
                        for j in range(len(cross_table_display.columns)):
                            value = int(cross_table_display.iloc[i, j])
                            price_range = cross_table_display.index[i]
                            area_range = cross_table_display.columns[j]
                            text = f'‰æ°Ê†º: {price_range}<br>{area_label}: {area_range}„é°<br>‰ª∂Êï∞: {value}‰ª∂'
                            row_text.append(text)
                        hover_text.append(row_text)

                    # „Éí„Éº„Éà„Éû„ÉÉ„Éó‰ΩúÊàê
                    fig = go.Figure(data=go.Heatmap(
                        z=cross_table_display.values,
                        x=cross_table_display.columns,
                        y=cross_table_display.index,
                        colorscale='Blues',
                        text=cross_table_display.values,
                        texttemplate='%{text:.0f}',
                        textfont={"size": 14},
                        hovertext=hover_text,
                        hovertemplate='%{hovertext}<extra></extra>',
                        colorbar=dict(title="‰ª∂Êï∞")
                    ))

                    # „É¨„Ç§„Ç¢„Ç¶„Éà„ÅÆË®≠ÂÆö
                    fig.update_layout(
                        title=None,
                        xaxis_title={
                            'text': f'{area_label}(„é°)',
                            'font': {'color': 'black', 'size': 14}
                        },
                        yaxis_title=None,
                        height=400,
                        plot_bgcolor='white',
                        paper_bgcolor='white',
                        font=dict(color='black'),
                        margin=dict(t=40, b=20, l=20, r=20),
                        xaxis=dict(
                            side='bottom',
                            tickfont=dict(color='black', size=14),
                            tickangle=0,
                            showgrid=False,
                            showline=True,
                            linecolor='black'
                        ),
                        yaxis=dict(
                            side='left',
                            tickfont=dict(color='black', size=14),
                            showgrid=False,
                            showline=True,
                            linecolor='black'
                        )
                    )


                    st.markdown("<h4>2. Âª∂Â∫äÈù¢Á©çÂà•‰æ°Ê†ºÂàÜÂ∏É</h4>", unsafe_allow_html=True)
                    st.plotly_chart(fig, use_container_width=True, config={'displayModeBar': False})

                    # Âª∫ÁØâÂπ¥Âà•‰æ°Ê†ºÂàÜÂ∏É„Ç∞„É©„Éï„ÇíËøΩÂä†ÔºàÂúüÂú∞‰ª•Â§ñ„ÅÆÂ†¥Âêà„ÅÆ„ÅøÔºâ

                    # Âª∫ÁØâÂπ¥„ÅÆ„Éá„Éº„Çø„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞ÔºàÂª∫ÁØâÂπ¥„ÅåÊúâÂäπ„Å™„Éá„Éº„Çø„ÅÆ„ÅøÔºâ
                    # df„Åã„ÇâÁõ¥Êé•Âª∫ÁØâÂπ¥„Éá„Éº„Çø„ÇíÂèñÂæó
                    build_year_df = df.copy()

                    # Âª∫ÁØâÂπ¥„ÅåÊúâÂäπ„Å™„Éá„Éº„Çø„ÅÆ„Åø„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
                    build_year_df = build_year_df[
                        (build_year_df['build_year'].notna()) &
                        (build_year_df['build_year'] != "") &
                        (build_year_df['build_year'] != "‰∏çË©≥")
                    ]

                    # Âª∫ÁØâÂπ¥„ÇíË•øÊö¶„Å´Â§âÊèõ
                    def convert_to_year(year_str):
                        if pd.isna(year_str) or year_str == "" or year_str == "‰∏çË©≥":
                            return None

                        try:
                            year_str = str(year_str)

                            # Êó¢„Å´Ë•øÊö¶4Ê°Å„ÅÆÂ†¥Âêà
                            if year_str.isdigit() and len(year_str) == 4:
                                return int(year_str)

                            # ÂíåÊö¶„Åã„ÇâË•øÊö¶„Å∏„ÅÆÂ§âÊèõ
                            if "Êò≠Âíå" in year_str:
                                num = int(''.join(filter(str.isdigit, year_str.replace("Êò≠Âíå", ""))))
                                return 1925 + num
                            elif "Âπ≥Êàê" in year_str:
                                num = int(''.join(filter(str.isdigit, year_str.replace("Âπ≥Êàê", ""))))
                                return 1988 + num
                            elif "‰ª§Âíå" in year_str:
                                num = int(''.join(filter(str.isdigit, year_str.replace("‰ª§Âíå", ""))))
                                return 2018 + num
                            else:
                                # Êï∞Â≠ó„ÅÆ„ÅøÊäΩÂá∫Ôºà"2024Âπ¥"„Å™„Å©„ÅÆÂ†¥ÂêàÔºâ
                                year_nums = ''.join(filter(str.isdigit, year_str))
                                if year_nums and len(year_nums) >= 4:
                                    return int(year_nums[:4])
                        except:
                            return None
                        return None

                    # Âª∫ÁØâÂπ¥„ÇíÂ§âÊèõ
                    build_year_df['year'] = build_year_df['build_year'].apply(convert_to_year)

                    # ÊúâÂäπ„Å™Âπ¥„ÅÆ„Åø„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
                    build_year_df = build_year_df[
                        (build_year_df['year'].notna()) &
                        (build_year_df['year'] > 1950) &
                        (build_year_df['year'] <= 2025)
                    ]

                    # ‰æ°Ê†º„Çí‰∏áÂÜÜÂçò‰Ωç„Å´Â§âÊèõ
                    build_year_df['price_man'] = build_year_df['price'] / 10000

                    if len(build_year_df) > 0:
                        # ÂõõÂçäÊúü„ÇíÊúàË°®Ë®ò„Å´Â§âÊèõ„Åô„ÇãÈñ¢Êï∞
                        def quarter_to_months_year(period_str):
                            if pd.isna(period_str):
                                return period_str
                            period_str = str(period_str)
                            if "Á¨¨1ÂõõÂçäÊúü" in period_str:
                                return period_str.replace("Á¨¨1ÂõõÂçäÊúü", "1Êúà„Äú3Êúà")
                            elif "Á¨¨2ÂõõÂçäÊúü" in period_str:
                                return period_str.replace("Á¨¨2ÂõõÂçäÊúü", "4Êúà„Äú6Êúà")
                            elif "Á¨¨3ÂõõÂçäÊúü" in period_str:
                                return period_str.replace("Á¨¨3ÂõõÂçäÊúü", "7Êúà„Äú9Êúà")
                            elif "Á¨¨4ÂõõÂçäÊúü" in period_str:
                                return period_str.replace("Á¨¨4ÂõõÂçäÊúü", "10Êúà„Äú12Êúà")
                            return period_str

                        # „Éõ„Éê„ÉºÊôÇ„Å´Ë°®Á§∫„Åô„ÇãÊÉÖÂ†±„ÇíÊ∫ñÂÇô
                        build_year_df['hover_text'] = (
                            'ÊâÄÂú®Âú∞: ' + build_year_df['location'] + '<br>' +
                            '‰æ°Ê†º: ' + build_year_df['price_formatted'] + '<br>' +
                            'Âª∫ÁØâÂπ¥: ' + build_year_df['year'].astype(str) + 'Âπ¥<br>' +
                            'Âª∂Â∫äÈù¢Á©ç: ' + build_year_df['building_area'].astype(str) + '„é°<br>' +
                            '„é°Âçò‰æ°: ' + build_year_df['unit_price_formatted'] + '<br>' +
                            'ÈñìÂèñ„Çä: ' + build_year_df['floor_plan'].astype(str) + '<br>' +
                            'ÂèñÂºïÊôÇÊúü: ' + build_year_df['trade_period'].apply(quarter_to_months_year).astype(str)
                        )

                        fig = go.Figure()

                        if use_target_year and target_year:
                            # Â∏åÊúõÂª∫ÁØâÂπ¥„Å®„ÅÆÂ∑Æ„ÇíË®àÁÆó
                            build_year_df['year_diff'] = abs(build_year_df['year'] - target_year)
                            build_year_df['is_target_year'] = build_year_df['year_diff'] <= year_tolerance

                            # ÁØÑÂõ≤Â§ñ„ÅÆÁâ©‰ª∂
                            non_target = build_year_df[~build_year_df['is_target_year']]
                            if len(non_target) > 0:
                                fig.add_trace(go.Scatter(
                                    x=non_target['year'],
                                    y=non_target['price_man'],
                                    mode='markers',
                                    name='„Åù„ÅÆ‰ªñ',
                                    marker=dict(
                                        color='#4169E1',
                                        size=8,
                                        opacity=0.6,
                                        line=dict(color='#000080', width=0.5)
                                    ),
                                    text=non_target['hover_text'],
                                    hovertemplate='%{text}<extra></extra>'
                                ))

                            # ÁØÑÂõ≤ÂÜÖ„ÅÆÁâ©‰ª∂
                            target = build_year_df[build_year_df['is_target_year']]
                            if len(target) > 0:
                                fig.add_trace(go.Scatter(
                                    x=target['year'],
                                    y=target['price_man'],
                                    mode='markers',
                                    name=f'{target_year}¬±{year_tolerance}Âπ¥',
                                    marker=dict(
                                        color='#FF4500',
                                        size=12,
                                        opacity=0.8,
                                        line=dict(color='#8B0000', width=1),
                                    ),
                                    text=target['hover_text'],
                                    hovertemplate='%{text}<extra></extra>'
                                ))

                                # Â∏åÊúõÂª∫ÁØâÂπ¥„Å´Á∏¶Á∑ö„ÇíËøΩÂä†
                                fig.add_vline(x=target_year, line_dash="dash", line_color="red",
                                            annotation_text=f"Âª∫ÁØâÂπ¥ {target_year}Âπ¥", annotation_position="top")

                                # Ë®±ÂÆπÁØÑÂõ≤„ÇíËÉåÊôØËâ≤„ÅßË°®Á§∫
                                fig.add_vrect(x0=target_year-year_tolerance, x1=target_year+year_tolerance,
                                            fillcolor="red", opacity=0.1, layer="below", line_width=0)
                        else:
                            # ÈÄöÂ∏∏„ÅÆÊï£Â∏ÉÂõ≥
                            fig.add_trace(go.Scatter(
                                x=build_year_df['year'],
                                y=build_year_df['price_man'],
                                mode='markers',
                                name='Áâ©‰ª∂',
                                marker=dict(
                                    color='#FFD700',
                                    size=10,
                                    opacity=0.7,
                                    line=dict(color='#FFA500', width=1)
                                ),
                                text=build_year_df['hover_text'],
                                hovertemplate='%{text}<extra></extra>'
                            ))

                        # „É¨„Ç§„Ç¢„Ç¶„Éà„ÅÆË®≠ÂÆö
                        fig.update_layout(
                            title=None,
                            xaxis_title={
                                'text': 'Âª∫ÁØâÂπ¥',
                                'font': {'color': 'black', 'size': 14}
                            },
                            yaxis_title=None,
                            height=500,
                            hovermode='closest',
                            showlegend=True,
                            plot_bgcolor='white',
                            paper_bgcolor='white',
                            font=dict(color='black'),
                            margin=dict(t=40, b=20, l=20, r=20),
                            xaxis=dict(
                                gridcolor='#E0E0E0',
                                gridwidth=0.5,
                                dtick=5,
                                range=[build_year_df['year'].min() - 2, build_year_df['year'].max() + 2],
                                showgrid=True,
                                zeroline=True,
                                zerolinecolor='#E0E0E0',
                                showline=True,
                                linecolor='black',
                                linewidth=1,
                                tickfont=dict(color='black', size=14),
                                tickcolor='black'
                            ),
                            yaxis=dict(
                                gridcolor='#E0E0E0',
                                gridwidth=0.5,
                                dtick=1000,
                                range=[0, min(10000, build_year_df['price_man'].max() + 500)],
                                showgrid=True,
                                zeroline=True,
                                zerolinecolor='#E0E0E0',
                                showline=True,
                                linecolor='black',
                                linewidth=1,
                                tickfont=dict(color='black', size=14),
                                tickcolor='black',
                                tickformat=',d',
                                ticksuffix='‰∏áÂÜÜ',
                                tickvals=list(range(0, int(min(10000, build_year_df['price_man'].max() + 500)) + 1, 1000)),
                                ticktext=[f'{i:,}‰∏áÂÜÜ' if i > 0 else '0' for i in range(0, int(min(10000, build_year_df['price_man'].max() + 500)) + 1, 1000)]
                            )
                        )


                        st.markdown("<h4>3. Âª∫ÁØâÂπ¥Âà•‰æ°Ê†ºÂàÜÂ∏É</h4>", unsafe_allow_html=True)
                        st.plotly_chart(fig, use_container_width=True, config={'displayModeBar': False})


                    # Âª∫ÁØâÂπ¥Âà•‰æ°Ê†ºÂàÜÂ∏É„ÅÆ„Éí„Éº„Éà„Éû„ÉÉ„Éó

                    # ‰æ°Ê†ºÂ∏Ø„ÇíÂÆöÁæ©Ôºà‰∏áÂÜÜÔºâ- 1000‰∏áÂÜÜÂàª„Åø
                    price_bins = list(range(0, 11000, 1000))  # 0, 1000, 2000, ..., 10000
                    price_bins.append(float('inf'))  # 10000‰∏áÂÜÜ‰ª•‰∏ä
                    price_labels = []
                    for i in range(len(price_bins)-1):
                        if price_bins[i+1] == float('inf'):
                            price_labels.append('10,000‰∏áÂÜÜ~')
                        elif price_bins[i] == 0:
                            price_labels.append(f'0~1,000‰∏áÂÜÜ')
                        else:
                            price_labels.append(f'{price_bins[i]:,}‰∏áÂÜÜ')

                    # Âª∫ÁØâÂπ¥Â∏Ø„ÇíÂÆöÁæ©Ôºà5Âπ¥Âàª„ÅøÔºâ
                    min_year = int(build_year_df['year'].min() / 5) * 5
                    max_year = int((build_year_df['year'].max() + 4) / 5) * 5
                    year_bins = list(range(min_year, max_year + 5, 5))
                    year_labels = [f"{year_bins[i]}" for i in range(len(year_bins)-1)]

                    # „Éá„Éº„Çø„ÇíÂàÜÈ°û
                    heatmap_df = build_year_df.copy()
                    heatmap_df['price_range'] = pd.cut(heatmap_df['price']/10000, bins=price_bins, labels=price_labels, right=False)
                    heatmap_df['year_range'] = pd.cut(heatmap_df['year'], bins=year_bins, labels=year_labels, right=False)

                    # „ÇØ„É≠„ÇπÈõÜË®àË°®„Çí‰ΩúÊàê
                    cross_table_year = pd.crosstab(heatmap_df['price_range'], heatmap_df['year_range']).fillna(0)

                    # Âàó„ÅÆÈ†ÜÂ∫è„ÇíË™øÊï¥
                    available_cols = [col for col in year_labels if col in cross_table_year.columns]
                    cross_table_year = cross_table_year.reindex(columns=available_cols, fill_value=0)

                    # Ë°å„ÅÆÈ†ÜÂ∫è„ÇíË™øÊï¥Ôºà‰∏ã„Åã„Çâ‰∏ä„Å∏Ôºö0‰∏áÂÜÜ‚Üí10,000‰∏áÂÜÜÔºâ
                    available_rows = [row for row in price_labels if row in cross_table_year.index]
                    cross_table_year = cross_table_year.reindex(index=available_rows, fill_value=0)
                    # YËª∏„ÇíÂèçËª¢Ôºà‰∏ã„Åã„Çâ‰∏ä„Å∏‰æ°Ê†º„Åå‰∏ä„Åå„Çã„Çà„ÅÜ„Å´Ôºâ
                    cross_table_year = cross_table_year.iloc[::-1]

                    # Ë°®Á§∫Áî®„Å´Êï¥ÂΩ¢
                    cross_table_year_display = cross_table_year.copy()
                    cross_table_year_display.index.name = '‰æ°Ê†º(‰∏áÂÜÜ)'
                    cross_table_year_display.columns.name = 'Âª∫ÁØâÂπ¥'

                    # Plotly„Åß„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å™„Éí„Éº„Éà„Éû„ÉÉ„Éó„Çí‰ΩúÊàê
                    import numpy as np

                    # „Éõ„Éê„Éº„ÉÜ„Ç≠„Çπ„Éà„Çí‰ΩúÊàê
                    hover_text = []
                    for i in range(len(cross_table_year_display.index)):
                        row_text = []
                        for j in range(len(cross_table_year_display.columns)):
                            value = int(cross_table_year_display.iloc[i, j])
                            price_range = cross_table_year_display.index[i]
                            year_range = cross_table_year_display.columns[j]
                            text = f'‰æ°Ê†º: {price_range}<br>Âª∫ÁØâÂπ¥: {year_range}Âπ¥<br>‰ª∂Êï∞: {value}‰ª∂'
                            row_text.append(text)
                        hover_text.append(row_text)

                    # „Éí„Éº„Éà„Éû„ÉÉ„Éó‰ΩúÊàê
                    fig = go.Figure(data=go.Heatmap(
                        z=cross_table_year_display.values,
                        x=cross_table_year_display.columns,
                        y=cross_table_year_display.index,
                        colorscale='Oranges',
                        text=cross_table_year_display.values,
                        texttemplate='%{text:.0f}',
                        textfont={"size": 14},
                        hovertext=hover_text,
                        hovertemplate='%{hovertext}<extra></extra>',
                        colorbar=dict(title="‰ª∂Êï∞")
                    ))

                    # „É¨„Ç§„Ç¢„Ç¶„Éà„ÅÆË®≠ÂÆö
                    fig.update_layout(
                        title=None,
                        xaxis_title={
                            'text': 'Âª∫ÁØâÂπ¥',
                            'font': {'color': 'black', 'size': 14}
                        },
                        yaxis_title=None,
                        height=400,
                        plot_bgcolor='white',
                        paper_bgcolor='white',
                        font=dict(color='black'),
                        margin=dict(t=40, b=20, l=100, r=20),
                        xaxis=dict(
                            side='bottom',
                            tickfont=dict(color='black', size=14),
                            tickangle=0,
                            showgrid=False,
                            showline=True,
                            linecolor='black'
                        ),
                        yaxis=dict(
                            side='left',
                            tickfont=dict(color='black', size=14),
                            showgrid=False,
                            showline=True,
                            linecolor='black',
                            tickmode='array',
                            tickvals=list(range(len(cross_table_year_display.index))),
                            ticktext=list(cross_table_year_display.index)
                        )
                    )


                    st.markdown("<h4>4. Âª∫ÁØâÂπ¥Âà•‰æ°Ê†ºÂàÜÂ∏ÉÔºà„Éí„Éº„Éà„Éû„ÉÉ„ÉóÔºâ</h4>", unsafe_allow_html=True)
                    st.plotly_chart(fig, use_container_width=True, config={'displayModeBar': False})


                # ÊàêÁ¥Ñ‰ª∂Êï∞„ÅÆÊé®Áßª„Ç∞„É©„Éï

                # ÂèñÂºïÊôÇÊúü„ÅÆ„Éá„Éº„Çø„ÇíÈõÜË®à
                period_df = pd.DataFrame()
                for item in results['results']:
                    if item.get('trade_period') and item['trade_period'] != "":
                        new_row = pd.DataFrame([{
                            'period': item['trade_period'],
                            'count': 1
                        }])
                        period_df = pd.concat([period_df, new_row], ignore_index=True)

                if len(period_df) > 0:
                    # ÊúüÈñìÂà•„Å´ÈõÜË®à
                    period_counts = period_df.groupby('period')['count'].sum().sort_index()

                    # ÂõõÂçäÊúü„ÇíÊúàË°®Ë®ò„Å´Â§âÊèõÔºàÊîπË°å‰ªò„ÅçÔºâ
                    def convert_quarter_to_month(period_str):
                        """ÂõõÂçäÊúüË°®Ë®ò„ÇíÊúàË°®Ë®ò„Å´Â§âÊèõÔºàÂπ¥„Å®Êúà„ÇíÊîπË°å„ÅßÂàÜ„Åë„ÇãÔºâ"""
                        if "Á¨¨1ÂõõÂçäÊúü" in period_str:
                            year = period_str.split("Âπ¥")[0] + "Âπ¥"
                            return year + "<br>1Êúà„Äú3Êúà"
                        elif "Á¨¨2ÂõõÂçäÊúü" in period_str:
                            year = period_str.split("Âπ¥")[0] + "Âπ¥"
                            return year + "<br>4Êúà„Äú6Êúà"
                        elif "Á¨¨3ÂõõÂçäÊúü" in period_str:
                            year = period_str.split("Âπ¥")[0] + "Âπ¥"
                            return year + "<br>7Êúà„Äú9Êúà"
                        elif "Á¨¨4ÂõõÂçäÊúü" in period_str:
                            year = period_str.split("Âπ¥")[0] + "Âπ¥"
                            return year + "<br>10Êúà„Äú12Êúà"
                        return period_str

                    x_labels = [convert_quarter_to_month(str(period)) for period in period_counts.index]

                    # Plotly„Åß„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å™Ê£í„Ç∞„É©„Éï„Çí‰ΩúÊàê
                    fig = go.Figure()

                    # „Éõ„Éê„Éº„ÉÜ„Ç≠„Çπ„Éà„Çí‰ΩúÊàê
                    hover_texts = []
                    for i, (period, count) in enumerate(zip(x_labels, period_counts.values)):
                        hover_texts.append(f'ÂèñÂºïÊôÇÊúü: {period}<br>ÊàêÁ¥Ñ‰ª∂Êï∞: {int(count)}‰ª∂')

                    # Ê£í„Ç∞„É©„Éï„ÇíËøΩÂä†
                    fig.add_trace(go.Bar(
                        x=x_labels,
                        y=period_counts.values,
                        marker=dict(
                            color='#87CEEB',  # skyblue
                            line=dict(
                                color='#000080',  # navy
                                width=1.5
                            )
                        ),
                        text=[f'{int(count)}‰ª∂' for count in period_counts.values],
                        textposition='outside',
                        textfont=dict(size=14, color='black'),
                        hovertext=hover_texts,
                        hovertemplate='%{hovertext}<extra></extra>'
                    ))

                    # „É¨„Ç§„Ç¢„Ç¶„Éà„ÅÆË®≠ÂÆö
                    max_count = int(period_counts.max()) + 2
                    fig.update_layout(
                        title=None,
                        xaxis_title={
                            'text': 'ÂèñÂºïÊôÇÊúü',
                            'font': {'color': 'black', 'size': 14}
                        },
                        yaxis_title=None,
                        height=500,
                        plot_bgcolor='white',
                        paper_bgcolor='white',
                        font=dict(color='black'),
                        margin=dict(t=40, b=60, l=20, r=20),
                        xaxis=dict(
                            tickfont=dict(color='black', size=14),
                            tickangle=0,
                            showgrid=False,
                            showline=True,
                            linecolor='black',
                            linewidth=1
                        ),
                        yaxis=dict(
                            tickfont=dict(color='black', size=14),
                            showgrid=True,
                            gridcolor='#E0E0E0',
                            gridwidth=0.5,
                            showline=True,
                            linecolor='black',
                            linewidth=1,
                            range=[0, max_count],
                            dtick=1,
                            tickmode='linear',
                            ticksuffix='‰ª∂'
                        ),
                        showlegend=False,
                        bargap=0.2
                    )


                    st.markdown("<h4>5. ÊàêÁ¥Ñ‰ª∂Êï∞Êé®Áßª</h4>", unsafe_allow_html=True)
                    st.plotly_chart(fig, use_container_width=True, config={'displayModeBar': False})

                else:
                    st.info("ÂèñÂºïÊôÇÊúü„Éá„Éº„Çø„ÅåÂê´„Åæ„Çå„ÇãÁâ©‰ª∂„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ")

            else:
                st.info("Ê§úÁ¥¢Êù°‰ª∂„Å´‰∏ÄËá¥„Åô„ÇãÁâ©‰ª∂„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ")


# „Éï„ÉÉ„Çø„Éº
st.markdown("---")
st.markdown("""
**„Éá„Éº„ÇøÊèê‰æõ**: [ÂõΩÂúü‰∫§ÈÄöÁúÅ ‰∏çÂãïÁî£ÊÉÖÂ†±„É©„Ç§„Éñ„É©„É™](https://www.reinfolib.mlit.go.jp/)

**Ê≥®ÊÑè‰∫ãÈ†Ö**:
- Êú¨„Çµ„Éº„Éì„Çπ„ÅØÂõΩÂúü‰∫§ÈÄöÁúÅ„ÅÆ‰∏çÂãïÁî£ÊÉÖÂ†±„É©„Ç§„Éñ„É©„É™„ÅÆAPIÊ©üËÉΩ„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„Åæ„Åô„Åå„ÄÅÊèê‰æõÊÉÖÂ†±„ÅÆÊúÄÊñ∞ÊÄß„ÄÅÊ≠£Á¢∫ÊÄß„ÄÅÂÆåÂÖ®ÊÄßÁ≠â„Åå‰øùË®º„Åï„Çå„Åü„ÇÇ„ÅÆ„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ
- Ë°®Á§∫„Åï„Çå„Çã‰æ°Ê†ºÊÉÖÂ†±„ÅØÂèÇËÄÉÊÉÖÂ†±„Åß„ÅÇ„Çä„ÄÅÂÆüÈöõ„ÅÆÂèñÂºï‰æ°Ê†º„Çí‰øùË®º„Åô„Çã„ÇÇ„ÅÆ„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ
- „Åì„Çå„ÅØÈ°û‰ººÊù°‰ª∂„ÅÆÈÅéÂéª„ÅÆÂèñÂºï‰∫ã‰æã„ÅÆÁµ±Ë®à„Åß„Åô„ÄÇÂÄãÂà•Áâ©‰ª∂„ÅÆÊüªÂÆö„ÇÑ‰æ°Ê†º‰∫àÊ∏¨„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ
- ÂÆüÈöõ„ÅÆ‰∏çÂãïÁî£‰æ°Ê†º„ÅØÂÄãÂà•Ë¶ÅÂõ†„Å´„Çà„ÇäÂ§ß„Åç„ÅèÁï∞„Å™„Çä„Åæ„Åô„ÄÇ
""")